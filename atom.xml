<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bingoran blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bingoran.github.io/"/>
  <updated>2017-05-26T07:22:30.000Z</updated>
  <id>https://bingoran.github.io/</id>
  
  <author>
    <name>bingoran</name>
    <email>751384171@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://bingoran.github.io/2017/05/25/2017-5-25-ViewController-Life-Cycle/"/>
    <id>https://bingoran.github.io/2017/05/25/2017-5-25-ViewController-Life-Cycle/</id>
    <published>2017-05-25T09:14:19.000Z</published>
    <updated>2017-05-26T07:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ViewController_的生命周期">ViewController 的生命周期</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">相信对于一个软件开发者来说，生命周期一定不是一个陌生的词语，我们软件开发所做的事情都是按照程序的生命周期进行的，在这个生命周期里边，我们和操作系统打着交道。在大部分的时间里，我们实际上并没有程序“控制权”，而是在配合系统或者一个类“正确”的完成他们的生命周期。以 ViewController 为例子，在 ViewController 中有一系列的生命周期方法，例如 loadView：、viewDidLoad：、viewWillAppear：、viewDidAppear、viewWillDisappear、viewDidDisappear 等等方法，这些方法似乎就像一个情报员，时刻告诉我们 ViewController 现在完成了什么、正在干什么、将要干什么。而我们只需要在正确的时间做正确的事情就行了，我们可以在某些方法里添加一些我们希望看到的视图、效果，而通过这些大量的定制组合就组成了我们的APP应用。</div><div class="line">既然我们都是按照程序的生命周期在完成我们的工作，那么我们作为开发者来说，正确的掌握生命周期内的每个方法就显得尤为重要了，这不仅仅是为了代码看起来更加的优雅，也是为了正确的完成系统交给我们的任务。</div><div class="line">一个类的生命周期，一定从 init... 开始，但实际开发中，ViewController 的入口几乎 99% 以上是 viewDidLoad ，这时，初始化已经完成，UIViewController 的属性 view 也已经被赋值，如果你重写了 loadView ，最后也会调用 viewDidLoad ，因此，这是个初始化子视图的好地方，这是因为：</div><div class="line">1.	viewDidLoad 只会被调用一次</div><div class="line">2.	如果使用 Autolayout ，这时 子视图的 frame 属性还没有被设置，没有被设置，没有被设置 ，这几乎是你唯一设置绑定的时机（用编码方式设置自动布局），另一个时机是Storyboard中的手动绑定，这当然在viewDidLoad被调用之前。</div><div class="line">最近刚好在 ViewController 的生命周期上面遇到了一些困扰，所以干脆研究下 ViewController 的生命周期</div></pre></td></tr></table></figure>
<h2 id="ViewController_的初始化">ViewController 的初始化</h2><p>平常我们接触的 ViewController 初始化无非两种方式，一种是通过 Storyboard（Xib类似）初始化，而另外一种就是我们直接通过代码的方式初始化。当然，这两种方式初始化过程是有细微差别的，下面将分别介绍这两种方式的不同初始化过程</p>
<h3 id="Storyboard_方式的初始化">Storyboard 方式的初始化</h3><p>Storyboard 在初始化阶段是由 <code>init(coder:)</code> -&gt; <code>awakeFromNib()</code> 进行的。</p>
<h4 id="init(coder:)">init(coder:)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. 当使用 Storyboard 时，控制器的构造器为 init(coder:)</div><div class="line">2. 该构造器为必需构造器，如果重写其他构造器，则必须重写该构造器</div><div class="line">3. 该构造器为可失败构造器，即有可能构造失败，返回 nil</div><div class="line">4. 该方法来源自 NSCoding 协议，而 UIViewController 遵从这一协议</div><div class="line">5. 该方法被调用意味着控制器有可能（并非一定）在未来会显示</div><div class="line">6. 在控制器生命周期中，该方法只会被调用一次</div></pre></td></tr></table></figure>
<h4 id="awakeFromNib()">awakeFromNib()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.当使用 Storyboard 时，该方法会被调用</div><div class="line">2.当调用该方法时，将保证所有的 outlet 和 action 连接已经完成</div><div class="line">3.该方法内部必须调用父类该方法，虽然默认实现为空，但 UIKit 中许多类的该方法为非空</div><div class="line">4.由于控制器中对象的初始化顺序不能确定，所以构造器中不应该向其他对象发送消息，而应当在 awakeFromNib() 中安全地发送</div><div class="line">5.通常使用 awakeFromNib() 可以进行在设计时无法完成的必要额外设置</div></pre></td></tr></table></figure>
<p>另外，由于是 Archive 并实例化对象，所以 View Controller 在初始化时调用的是 init(coder:)。手动调用 init 则不会从 nib 文件里加载,这个方法在执行 loadNibNamed: 一类的方法时就会被调用</p>
<h3 id="Code_方式的初始化">Code 方式的初始化</h3><p>不同 Storyboard 的是，Code 在初始化阶段是调用 <code>init(nibName:bundle:)</code> 这个方法</p>
<h4 id="init(nibName:bundle:)">init(nibName:bundle:)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.当使用纯代码创建控制器，控制器的构造器为 init(nibName:bundle:)</div><div class="line">2.虽然使用代码创建时调用了该构造器，但传入的参数均为 nil</div></pre></td></tr></table></figure>
<h3 id="loadView()">loadView()</h3><p>View Controller 创建后需要加载 self.view 时会调用这个方法。此方法不应该被直接调用,如果我们的界面是在 Storyboard 中创建的，那我们也不应该覆盖这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.loadView() 即加载控制器管理的 view</div><div class="line">2.不能直接手动调用该方法；当 view 被请求却为 nil 时，该方法加载并创建 view</div><div class="line">3.若控制器有关联的 Nib 文件，该方法会从 Nib 文件中加载 view；如果没有，则创建空白 UIView 对象</div><div class="line">4.如果使用 Interface Builder 创建 view，则务必不要重写该方法</div><div class="line">5.可以使用该方法手动创建视图，且需要将根视图分配为 view；自定义实现不应该再调用父类的该方法</div><div class="line">6.执行其他初始化操作，建议放在 viewDidLoad() 中</div></pre></td></tr></table></figure></p>
<p>当 View Controller 有以下情况时都会在此方法中从 nib 文件加载 View ：</p>
<ul>
<li>View Controller 是从 storyboard 中实例化的</li>
<li>通过 initWithNibName:bundle: 初始化</li>
<li>在 App Bundle 中有一个 nib 文件名称和本类名相同</li>
</ul>
<p>当我们调用 self.view 时，如果 self.view 非 nil，那么会直接调用该对象。如果为 nil，那么会调用 self.loadView() 创建一个 UIView 并将这个对象赋值给 self.view<br>在这个函数里调用 self.view 属性会造成死循环。因为访问 self.view 时发现该属性为空，会去调用 loadView() 方法，此时会造成死循环</p>
<h3 id="viewDidLoad()">viewDidLoad()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.view 被加载到内存后调用 viewDidLoad()</div><div class="line">2.重写该方法需要首先调用父类该方法</div><div class="line">3.该方法中可以额外初始化控件，例如添加子控件，添加约束</div><div class="line">4.该方法被调用意味着控制器有可能（并非一定）在未来会显示</div><div class="line">5.在控制器生命周期中，该方法只会被调用一次</div></pre></td></tr></table></figure>
<p>注意：此时 view 还没有被加入 view hierarchy 中，只是被加载入了内存中。在这里如果执行 self.presentViewController 之类的操作会出错</p>
<h3 id="viewWillAppear(_:)">viewWillAppear(_:)</h3><p>当 View 将要被添加到 View Hierarchy 中时会调用这个方法，每一次 View 将要显示时都会调用。在这个方法被调用时，也是在显示 View 所需要的动画被配置前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.该方法在控制器 view 即将添加到视图层次时以及展示 view 时所有动画配置前被调用</div><div class="line">2.重写该方法需要首先调用父类该方法</div><div class="line">3.该方法中可以进行操作即将显示的 view，例如改变状态栏的取向，类型</div><div class="line">4.该方法被调用意味着控制器将一定会显示</div><div class="line">5.在控制器生命周期中，该方法可能会被多次调用</div></pre></td></tr></table></figure></p>
<p>注意：这个时候在做一些和 frame 相关的操作时仍会出错，在这里 View 将要被加入 View Hierarchy，但是仍旧没有被添加进去</p>
<h3 id="updateViewConstraints">updateViewConstraints</h3><p>   updateViewConstraints 是 AutoLayout出现后新增的 api ，苹果官方的解释是该方法是用来添加约束的，重新该方法需要在方法实现的最后调用父类的该方法。并且这两个方法不建议直接调用<br>   这里要注意，如果一个 view 或 controller 是由 interface builder 初始化的，那么这个实例的 updateViewConstraints 或 updateConstraints 方法便会被系统自动调用，起原因应该就是对应的 requiresConstraintBasedLayout 方法返回 true。而纯代码初始化的视图 requiresConstraintBasedLayout 方法默认返回 false。<br>所以在纯代码自定义一个 view 时，想把约束写在 updateConstraints 方法中，就一定要重写requiresConstraintBasedLayout 方法，返回true。</p>
<h3 id="viewWillLayoutSubviews()">viewWillLayoutSubviews()</h3><p>在 ViewController.view 将要布局 Subviews 时调用。当每一次界面的布局发生变化时都会被调用，例如旋转、被标记为需要 layout，在这之后 AutoLayout 会改变布局，在此方法中view的bound和orientation才最终确定，如果没有使用autoresizing mask或autolayout约束，可以在这个方法里布局subview，但是要注意，此方法只要根view的frame发生变化，或者标记为need layout，就会调用此方法，所以可能调多次，不适合做复杂的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.该方法在通知控制器将要布局 view 的子控件时调用</div><div class="line">2.每当视图的 bounds 改变，view 将调整其子控件位置</div><div class="line">3.该方法可重写以在 view 布局子控件前做出改变</div><div class="line">4.该方法的默认实现为空</div><div class="line">5.该方法调用时，AutoLayout 未起作用</div><div class="line">6.在控制器生命周期中，该方法可能会被多次调用</div></pre></td></tr></table></figure></p>
<p>注意点:init初始化不会触发layoutSubviews<br>  addSubview会触发layoutSubviews<br>  设置view的Frame会触发layoutSubviews，当然前提 是frame的值设置前后发生了变化<br>  滚动一个UIScrollView会触发layoutSubviews<br>  旋转Screen会触发父UIView上的layoutSubviews事件<br>  改变一个UIView大小的时候也会触发父UIView上的layoutSubviews事件</p>
<h3 id="viewDidLayoutSubviews()">viewDidLayoutSubviews()</h3><p>已经布局完成，也可以做一些操作，已通过 AutoLayout 布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.该方法在通知控制器已经布局 view 的子控件时调用</div><div class="line">2.该方法可重写以在 view 布局子控件后做出改变</div><div class="line">3.该方法的默认实现为空</div><div class="line">4.该方法调用时，AutoLayout 已经完成</div><div class="line">5.在控制器生命周期中，该方法可能会被多次调用</div></pre></td></tr></table></figure></p>
<h3 id="viewDidAppear(_:)">viewDidAppear(_:)</h3><p>此时界面已经被显示出来了，做一些操作时可能会让界面变化可见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.该方法在控制器 view 已经添加到视图层次时被调用</div><div class="line">2.重写该方法需要首先调用父类该方法</div><div class="line">3.该方法可重写以进行有关正在展示的视图操作</div><div class="line">4.在控制器生命周期中，该方法可能会被多次调用</div></pre></td></tr></table></figure></p>
<h4 id="一个例子">一个例子</h4><p>通过 AutoLayout 在界面中添加一个 UITextView，在各个阶段输出它的 Frame 结果如下</p>
<ul>
<li><p>viewDidLoad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">frame = (20 40; 560 160);  </div><div class="line">contentSize: &#123;560, 133&#125;;  </div><div class="line">contentOffset: &#123;0, 0&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>viewWillAppear</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">frame = (20 40; 560 160);  </div><div class="line">contentOffset: &#123;0, 0&#125;;  </div><div class="line">contentSize: &#123;560, 133&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>viewWillLayoutSubviews</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">frame = (20 40; 560 160);  </div><div class="line">contentOffset: &#123;0, 0&#125;;  </div><div class="line">contentSize: &#123;560, 133&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>viewDidLayoutSubviews</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">frame = (20 40; 374 296);  </div><div class="line">contentOffset: &#123;0, -15&#125;;  </div><div class="line">contentSize: &#123;374, 184&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>viewDidAppear</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">frame = (20 40; 374 296);  </div><div class="line">contentOffset: &#123;0, -15&#125;;  </div><div class="line">contentSize: &#123;374, 184&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到，从 viewDidLayoutSubview 开始， UITextView 的 Frame 发生了一次变化， contentSize 与 contentOffset 都发生了变化；因为在 viewWillAppear 及之前， view 还没有被加入层级中，布局还不是最终布局；所以在 viewWillAppear 及以前，计算 UITextView 行高等操作可能会出现问题；当呼出键盘后，viewWillLayoutSubview viewDidLayoutSubviews 将会被调用。可以看出，每一次布局发生变化时候这两个方法都会被调用</p>
<h3 id="viewWillDisappear(_:)">viewWillDisappear(_:)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.该方法在控制器 view 将要从视图层次移除时被调用</div><div class="line">2.类似 viewWillAppear(_:)</div><div class="line">3.该方法可重写以提交变更，取消视图第一响应者状态</div></pre></td></tr></table></figure>
<h3 id="viewDidDisappear(_:)">viewDidDisappear(_:)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.该方法在控制器 view 已经从视图层次移除时被调用</div><div class="line">2.类似 viewDidAppear(_:)</div><div class="line">3.该方法可重写以清除或隐藏控件</div></pre></td></tr></table></figure>
<h3 id="didReceiveMemoryWarning()">didReceiveMemoryWarning()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.当内存预警时，该方法被调用</div><div class="line">2.不能直接手动调用该方法</div><div class="line">3.该方法可重写以释放资源、内存</div></pre></td></tr></table></figure>
<h3 id="deinit()">deinit()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.控制器销毁时（离开堆），调用该方法</div></pre></td></tr></table></figure>
<h3 id="几个例子">几个例子</h3><h4 id="屏幕旋转">屏幕旋转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">willTransition(to:with:)</div><div class="line">输出:</div><div class="line">viewWillLayoutSubviews() - Optional((67.5, 269.5, 240.0, 128.0))</div><div class="line">viewDidLayoutSubviews() - Optional((213.5, 123.5, 240.0, 128.0))</div><div class="line">viewWillLayoutSubviews() - Optional((213.5, 123.5, 240.0, 128.0))</div><div class="line">viewDidLayoutSubviews() - Optional((213.5, 123.5, 240.0, 128.0))</div><div class="line">viewWillLayoutSubviews() - Optional((213.5, 123.5, 240.0, 128.0))</div><div class="line">viewDidLayoutSubviews() - Optional((213.5, 123.5, 240.0, 128.0))</div></pre></td></tr></table></figure>
<ul>
<li>当 view 转变，会调用 <code>willTransition(to:with:)</code> 方法</li>
<li>当屏幕旋转，view 的 bounds 改变，其内部的子控件也需要按照约束调整为新的位置，因此也调用了 <code>viewWillLayoutSubviews()</code> 和 <code>viewDidLayoutSubviews()</code> </li>
</ul>
<h4 id="Present_&amp;_Dismiss">Present &amp; Dismiss</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输出:</div><div class="line">viewWillDisappear</div><div class="line">viewDidDisappear</div><div class="line">viewDidDisappear</div><div class="line">viewWillAppear</div><div class="line">viewDidAppear</div></pre></td></tr></table></figure>
<ul>
<li>当在一个控制器内 Present 新的控制器，原先的控制器并不会销毁，但会消失，因此调用了 <code>viewWillDisappear</code> 和 <code>viewDidDisappear</code> 方法</li>
<li>如果新的控制器 Dismiss，即清除自己，原先的控制器会再一次出现，因此调用了其中的 <code>viewWillAppear</code> 和 <code>viewDidAppear</code> 方法</li>
</ul>
<h4 id="死循环">死循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class LoopViewController: UIViewController &#123;</div><div class="line"></div><div class="line">    override func loadView() &#123;</div><div class="line">        print(#function)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        print(#function)</div><div class="line">        let _ = view</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">输出:</div><div class="line">loadView()</div><div class="line">viewDidLoad()</div><div class="line">loadView()</div><div class="line">viewDidLoad()</div><div class="line">loadView()</div><div class="line">viewDidLoad()</div><div class="line">loadView()</div><div class="line">viewDidLoad()</div><div class="line">loadView()</div></pre></td></tr></table></figure>
<ul>
<li>若 <code>loadView()</code> 没有加载 view，<code>viewDidLoad()</code> 会一直调用 <code>loadView()</code> 加载 view，因此构成了死循环，程序即卡死</li>
</ul>
<h4 id="push到下一个页面时">push到下一个页面时</h4><p>配合Storyboard方式的方法列表调用顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">1.	init(coder:)</div><div class="line">2.	awakeFromNib</div><div class="line">3.	willMoveToParentViewController:</div><div class="line">4.	prefersStatusBarHidden</div><div class="line">5.	preferredStatusBarUpdateAnimation</div><div class="line">6.	loadView</div><div class="line">7.	prepareForSegue:sender:</div><div class="line">8.	viewDidLoad</div><div class="line">9.	extendedLayoutIncludesOpaqueBars</div><div class="line">10.edgesForExtendedLayout</div><div class="line">11.viewWillAppear:</div><div class="line">12.extendedLayoutIncludesOpaqueBars</div><div class="line">13.edgesForExtendedLayout</div><div class="line">14.updateViewConstraints</div><div class="line">15.viewWillLayoutSubviews</div><div class="line">16.viewDidLayoutSubviews</div><div class="line">17.（Animation）</div><div class="line">18.viewDidAppear:</div><div class="line">19.didMoveToParentViewController:</div><div class="line">20.updateViewConstraints</div><div class="line">21.viewWillLayoutSubviews</div><div class="line">22.viewDidLayoutSubviews</div></pre></td></tr></table></figure></p>
<h1 id="UIView_的生命周期">UIView 的生命周期</h1><ul>
<li>通常，UIView 应尽可能避免重写构造器。</li>
<li>init(frame:)：纯代码（指定构造器）；init(coder:)：Storyboard（必需可失败构造器）。若需要构造器，需要同时重写这两个构造器：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">func setup() &#123;</div><div class="line">    // 如果本类有自定义变量，则此处不可初始化他们，</div><div class="line">    // 因为只有当初始化后才能调用自己的方法。</div><div class="line">&#125;</div><div class="line"></div><div class="line">override init(frame: CGRect) &#123;</div><div class="line">    super.init(frame: frame)</div><div class="line">    // 初始化变量</div><div class="line">    setup()</div><div class="line">&#125;</div><div class="line"></div><div class="line">required init?(coder aDecoder: NSCoder) &#123;</div><div class="line">    super.init(coder: aDecoder)</div><div class="line">    // 初始化变量</div><div class="line">    setup()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>awakeFromNib() 只在使用 Storyboard 的 UIView 中被调用。</li>
<li>awakeFromNib() 并不是构造器，但它在初始化完成后立即被调用。</li>
<li>所有 Storyboard 中继承自 NSObject 的对象发送该消息。但顺序是不确定的，因此不能在这里调用其他任何 Storyboard 中的对象</li>
</ul>
<h2 id="Xib_&amp;_Nib">Xib &amp; Nib</h2><ul>
<li>ib 是 Interface Builder 的缩写，即界面构造器。这里简要说下，Xib 和 Nib 各是什么，有什么区别</li>
<li>Xib 实际是一个 XML 文件，而 Nib 是二进制文件。当应用编译时，Xib 文件被翻译为 Nib。所以在 Xcode 中，我们可以自己新建 Xib 文件来构造 UI，而当编译时，Xcode 会自动生成相应的 Nib 文件，而不需我们额外关注。关于其详细介绍，您可以参考文末的资料<br> 我们现在新建一个继承UIView的MyView类，并勾选Xib，并将 Utilities 中 Identity inspector 的 Custom Class 改为 MyView<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import UIKit</div><div class="line">class MyView: UIView &#123;</div><div class="line"></div><div class="line">    override init(frame: CGRect) &#123;</div><div class="line">        super.init(frame: frame)</div><div class="line"></div><div class="line">        print(&quot;init(frame:)&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    required init?(coder aDecoder: NSCoder) &#123;</div><div class="line">        super.init(coder: aDecoder)</div><div class="line"></div><div class="line">        print(&quot;init(coder:)&quot;)</div><div class="line">        // fatalError(&quot;init(coder:) has not been implemented&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func awakeFromNib() &#123;</div><div class="line">        super.awakeFromNib()</div><div class="line"></div><div class="line">        print(&quot;awakeFromNib()&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>之后运行即可在屏幕上看到该自定义 UIView，控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输出</div><div class="line">init(coder:)</div><div class="line">awakeFromNib()</div></pre></td></tr></table></figure></p>
<p>通过打印的输出，可以看出使用 Interface Builder 载入 View 不会调用 <code>init(frame:)</code> 方法，而是调用了 <code>init(coder:)</code>。<code>init(coder:)</code> 是 NSCoding 协议中的方法，NSCoding 是负责编码解码，归档处理的协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">required init?(coder aDecoder: NSCoder)</div></pre></td></tr></table></figure></p>
<p>init(coder:) 的调用处于 Nib 载入时，而 awakeFromNib() 的调用处于 Nib 载入后。Nib 的载入过程如下：</p>
<ul>
<li>Nib 文件内容和引用的资源文件加载到内存；</li>
<li>反归档存储于 Nib 文件的图像数据对象并初始化；</li>
<li>遵从 NSCoding 的对象（UIView &amp; UIViewController）调用 init(coder:)</li>
<li>其他对象调用其他构造器方法</li>
<li>建立对象间连接：Outlet &amp; Action</li>
<li>实现 awakeFromNib() 的对象调用该方法</li>
</ul>
<p>需要注意的是，awakeFromNib() 中需要调用父类的该方法以保证父类的进行额外初始化。而在本例中重写的 init(coder:) 目的主要是查看调用顺序，并没有加入特别的操作。因此在实际使用中，如果使用 Interface Builder，可以不重写该方法</p>
<h2 id="Code">Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import UIKit</div><div class="line">class MyView: UIView &#123;</div><div class="line"></div><div class="line">    override init(frame: CGRect) &#123;</div><div class="line">        super.init(frame: frame)</div><div class="line"></div><div class="line">        print(&quot;init(frame:)&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    required init?(coder aDecoder: NSCoder) &#123;</div><div class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func awakeFromNib() &#123;</div><div class="line">        super.awakeFromNib()</div><div class="line"></div><div class="line">        print(&quot;awakeFromNib&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后在其他UIView或者UIController调用该类的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输出</div><div class="line">init(frame:)</div></pre></td></tr></table></figure></p>
<p>通过纯代码创建自定义 UIView，便只调用 <code>init(frame:)</code> 方法，不涉及 Nib 的方法，因此不会调用 <code>awakeFromNib()</code> 和 <code>init(coder:)</code> 方法。而由于 <code>init(coder:)</code> 为必要构造器，因此重写 <code>init(frame:)</code> 时，必须实现该方法</p>
<p>有时，为了便于从 Interface Builder 和纯代码都能创建自定义 UIView 对象，可以将 <code>init(coder:)</code> 方法改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">required init?(coder aDecoder: NSCoder) &#123;</div><div class="line">    super.init(coder: aDecoder)</div><div class="line">    // fatalError(&quot;init(coder:) has not been implemented&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若保留 <code>fatalError()</code>，则从 Nib 初始化时会无条件输出语句并停止运行</p>
<h2 id="参考链接">参考链接</h2><p> <a href="https://juejin.im/entry/57988af4d342d300590d5445" target="_blank" rel="external">https://juejin.im/entry/57988af4d342d300590d5445</a><br> <a href="https://juejin.im/post/58c20a761b69e6006bc965ee" target="_blank" rel="external">https://juejin.im/post/58c20a761b69e6006bc965ee</a><br> <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html</a><br> <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID203" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID203</a><br> <a href="https://github.com/kingcos/CS193P_2017" target="_blank" rel="external">https://github.com/kingcos/CS193P_2017</a><br> <a href="http://amztion.com/2016/12/03/uiviewcontroller-lifecycle/" target="_blank" rel="external">http://amztion.com/2016/12/03/uiviewcontroller-lifecycle/</a><br> <a href="http://www.infoq.com/cn/articles/ios-app-arch-2-1" target="_blank" rel="external">http://www.infoq.com/cn/articles/ios-app-arch-2-1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ViewController_的生命周期&quot;&gt;ViewController 的生命周期&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jenkins+gitlab+fir.im持续集成环境搭建</title>
    <link href="https://bingoran.github.io/2017/05/20/2017-5-20-Jenkins/"/>
    <id>https://bingoran.github.io/2017/05/20/2017-5-20-Jenkins/</id>
    <published>2017-05-20T12:23:10.000Z</published>
    <updated>2017-05-22T02:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是持续集成">什么是持续集成</h3><p>持续集成(Continuous Integration)持续是指开发阶段，对项目进行持续性自动化编译、测试，以达到控制代码质量的手段。持续集成是一种软件开发实践。<br>                                                                                      — MBALab</p>
<h3 id="持续集成工具">持续集成工具</h3><p>Jenkins、Travis、Gitlab、buddybuild等都是常见的持续集成工具，虽然他们都可以用于持续集成，但是不乏有各自的优缺点。综合考虑，Jenkins目前是其中使用最广泛，最主流的持续集成工具，这篇文章也是主要围绕Jenkins进行展开来讲。<br>Jenkins作为传统的工具，前身是Hudson，从04年到现在已经有十几年的发展历史。因为这个      工具比较常用，大家也比较认可，软件开发的各种实践也可以通过大量的插件组合来实现，可定制性也比较好。</p>
<h3 id="Jenkins">Jenkins</h3><p>1、那么Jenkins 有哪些功能呢？<br>      （1）定时拉取代码并编译<br>      （2）静态代码分析<br>      （3）定时打包发布测试版<br>      （4）自定义额外的操作，如跑单元测试等<br>      （5）出错提醒<br>    基本上都是持续集成实践中的要求和周边的一些实现措施，如提醒功能等，出错后及时提醒开发者修复，Jenkins 中通过配置 SMTP 配置信息（这个一般的邮件服务提供商都有提供），邮件模板等，创建事件触发器，在事件（如编译失败）发生时，及时发送邮件通知开发者，挺方便的。<br>2、Jenkins流程<br><img src="/img/Jenkins/1.png" alt="如图"><br><a id="more"></a></p>
<h3 id="平台搭建">平台搭建</h3><h2 id="Jenkins的安装和启动">Jenkins的安装和启动</h2><p>Jenkins是基于Java开发的一套持续集成系统，所以在安装的时候需要依赖系统的Java环境。（这里的安装是基于homebrew的）<br>（1）java 环境准备<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew cask install java</div></pre></td></tr></table></figure></p>
<p>（2）Jenkins安装<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install Jenkins</div></pre></td></tr></table></figure></p>
<p>（3）Jenkins启动和停止<br>因为homebrew已经集成了服务的暂停和启动功能，所以直接使用homebrew的服务暂停和启动命令<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">启动：brew services start Jenkins</div><div class="line">暂停：brew services stop Jenkins</div></pre></td></tr></table></figure></p>
<p>（4）Jenkins访问<br>经过上面的步骤，我们就可以输入<a href="http://localhost:8080进行本地访问了，不出意外，我们就可以进行首次的Jenkins访问了" target="_blank" rel="external">http://localhost:8080进行本地访问了，不出意外，我们就可以进行首次的Jenkins访问了</a><br><img src="/img/Jenkins/2.png" alt="如图"><br>首次访问会首先进入初始访问界面，这里需要我们输入初始密码，当然在我们安装Jenkins的时候系统为我们创建了一个初始密码，在~/.jenkins/secrets/initialAdminPassword这个文件目录下，我们可以通过vim命令进行查看然后copy到这里<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.jenkins/secrets/initialAdminPassword</div></pre></td></tr></table></figure></p>
<p>到这里我们就可以进入下一步操作了，点击Continue<br><img src="/img/Jenkins/3.png" alt="如图"><br>这里会有两个选项，第一个的大概意思就是Jenkins建议安装的插件组合，第二个就是根据自己的需要自己定制选择插件组合，这里我们选择第一项。接下来就是等待安装的过程。<br><img src="/img/Jenkins/4.png" alt="如图"><br><img src="/img/Jenkins/5.png" alt="如图"><br>上一步安装完了后浏览器会显示下面的界面<br><img src="/img/Jenkins/6.png" alt="如图"><br><img src="/img/Jenkins/7.png" alt="如图"><br><img src="/img/Jenkins/8.png" alt="如图"><br>到这一步，输入用户名密码等相关信息，就算大功告成了，此后我们还需要安装一些辅助插件。选择系统管理-&gt;插件管理<br><img src="/img/Jenkins/9.png" alt="如图"><br><img src="/img/Jenkins/10.png" alt="如图"><br>这里我们可以选择安装我们需要的插件，这里我们是用于iOS持续集成构建，所以我们要安装一些iOS相关的插件。<br>    （1）iOS专用：Xcode integration<br>    （2）Gitlab插件：GitLab Plugin<br>    （3）Git插件： Git plugin<br>    （4）签名证书管理插件: Credentials Plugin 和Keychains and Provisioning Profiles Management<br>    （5）脚本插件: Post-Build Script Plug-in<br>    （6）获取仓库提交的commit log： Git Changelog Plugin<br>等等其它： GIT plugin / SSH Credentials Plugin</p>
<p>（5）iOS项目构建<br>经过前面的步骤和配置，我们就可以开始构建一个iOS项目了。点击创建一个新任务-&gt;输入构建项目名称<br><img src="/img/Jenkins/11.png" alt="如图"><br><img src="/img/Jenkins/12.png" alt="如图"><br>接下来我们就可以开始对项目进行配置了<br>1)   General<br>    这里主要是输入一些项目名称和项目描述之类的东西，一般没什么特殊的要求<br><img src="/img/Jenkins/13.png" alt="如图"><br>2）源码管理<br>这里主要是配置项目仓库访问路径和公钥，首先我们配置公钥，选择 Credentials进行项目公钥配置，这里的公钥配置和其它Git配置都差不多，所以不用多说，因为我们的本地一般已经配置好项目仓库的公钥，所以进入～/.ssh,找到相应的公钥，复制过来就好，如图<br><img src="/img/Jenkins/14.png" alt="如图"><br>我们的项目是托管在给gitlab上面的，所以我们选择Git，在Repository URL这里输入项目访问路径，Credentials选择我们刚刚配置好的公钥就好，然后我们可以在Branch Specifier (blank for ‘any’)这里输入我们需要构建的项目分支，如图所示<br><img src="/img/Jenkins/15.png" alt="如图"><br>3）构建触发器<br>  构建触发器，其实就是配置项目的构建自动构建周期，他的格式如下，如果有不懂的，点击后面的问好，他有关于这个的详细说明<br><img src="/img/Jenkins/16.png" alt="如图"><br>如图是点击问号后展示的格式说明<br><img src="/img/Jenkins/17.png" alt="如图"><br>4）构建环境设置<br>构建环境设置 iOS打包需要签名文件和证书，所以这部分我们勾选“Keychains and Code Signing Identities”和“Mobile Provisioning Profiles”。 这里我们又需要用到Jenkins的插件，在系统管理页面，选择“Keychains and Provisioning Profiles Management”<br><img src="/img/Jenkins/18.png" alt="如图"><br><img src="/img/Jenkins/19.png" alt="如图"><br>进入Keychains and Provisioning Profiles Management页面，点击“选择文件”按钮，分别上传自己的keychain和证书。上传成功后，我们再为keychain指明签名文件的名称。点击“Add Code Signing Identity”，最后添加成功后如下图所示：<br><img src="/img/Jenkins/20.png" alt="如图"><br>这个Keychain其实在/Users/管理员用户名/Library/keychains/login.keychain,当把这个Keychain设置好了之后，Jenkins会把这个Keychain拷贝到/Users/Shared/Jenkins/Library/keychains这里，(Library是隐藏文件)。Provisioning Profiles文件也直接拷贝，<br>Code Signing Identity 直接就是钥匙串里相应证书的名字<br><img src="/img/Jenkins/21.png" alt="如图"><br>好了现在我们回到项目配置的地方，选择刚刚配置好的东西就好，到此<br><img src="/img/Jenkins/22.png" alt="如图"><br>5）构建<br>  这是自动化设置的关键一步了，我们可以写一个配置脚本，也可以直接把配置写在这里，为了直观我直接把配置写在这里了：<br><img src="/img/Jenkins/23.png" alt="如图"><br><img src="/img/Jenkins/24.png" alt="如图"><br>以下我把配置贴出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 工程名</span></div><div class="line">APP_NAME=<span class="string">"ZUITool"</span></div><div class="line"></div><div class="line"><span class="comment"># 证书</span></div><div class="line">CODE_SIGN_DISTRIBUTION=<span class="string">"iPhone Developer: XXX (4QBP298QQK)"</span></div><div class="line"></div><div class="line"><span class="comment"># info.plist路径</span></div><div class="line">project_infoplist_path=<span class="string">"./<span class="variable">$&#123;APP_NAME&#125;</span>/Info.plist"</span></div><div class="line"></div><div class="line"><span class="comment">#取版本号</span></div><div class="line">bundleShortVersion=$(/usr/libexec/PlistBuddy -c <span class="string">"print CFBundleShortVersionString"</span> <span class="string">"<span class="variable">$&#123;project_infoplist_path&#125;</span>"</span>)</div><div class="line"></div><div class="line"><span class="comment">#取build值</span></div><div class="line">bundleVersion=$(/usr/libexec/PlistBuddy -c <span class="string">"print CFBundleVersion"</span> <span class="string">"<span class="variable">$&#123;project_infoplist_path&#125;</span>"</span>)</div><div class="line"></div><div class="line"><span class="comment">#DATE="$(date +%Y%m%d)"</span></div><div class="line">IPANAME=<span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span>_V<span class="variable">$&#123;bundleShortVersion&#125;</span>_<span class="variable">$&#123;DATE&#125;</span>.ipa"</span></div><div class="line"></div><div class="line"><span class="comment">#要上传的ipa文件路径</span></div><div class="line">IPA_PATH=<span class="string">"<span class="variable">$HOME</span>/<span class="variable">$&#123;IPANAME&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$&#123;IPA_PATH&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;IPA_PATH&#125;</span>"</span>&gt;&gt; text.txt</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"=================clean================="</span></div><div class="line"><span class="comment">#xcodebuild -workspace "$&#123;APP_NAME&#125;.xcworkspace" -scheme "$&#123;APP_NAME&#125;" -configuration 'Release' clean</span></div><div class="line">xcodebuild clean</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"+++++++++++++++++build+++++++++++++++++"</span></div><div class="line"><span class="comment">#xcodebuild -workspace "$&#123;APP_NAME&#125;.xcworkspace" -scheme "$&#123;APP_NAME&#125;" -sdk iphoneos -configuration 'Release' CODE_SIGN_IDENTITY="$&#123;CODE_SIGN_DISTRIBUTION&#125;" SYMROOT='$(PWD)'</span></div><div class="line"><span class="comment">#xcodebuild -workspace "$&#123;APP_NAME&#125;.xcworkspace" -scheme "$&#123;APP_NAME&#125;" -configuration Release</span></div><div class="line">xcodebuild -workspace ZUITool.xcworkspace -scheme ZUITool -configuration Release</div><div class="line"></div><div class="line"><span class="comment">#xcrun -sdk iphoneos PackageApplication "./Release-iphoneos/$&#123;APP_NAME&#125;.app" -o ~/Desktop/ipaF/"$&#123;IPANAME&#125;"</span></div><div class="line"><span class="comment">#xcrun -sdk iphoneos -v PackageApplication "./Release-iphoneos/$&#123;APP_NAME&#125;.app" -o ~/Desktop/ipaF/"$&#123;IPANAME&#125;.ipa"</span></div><div class="line">xcrun -sdk iphoneos -v PackageApplication /Users/luobing/Library/Developer/Xcode/DerivedData/ZUITool-gaqncfkjsvbmadavdavhfdqdlupo/Build/Products/Release-iphoneos/ZUITool.app -o /Users/luobing/.jenkins/workspace/IosBuildingTest/build/Release-iphoneos/ZUITool.ipa</div></pre></td></tr></table></figure></p>
<p>值得一题的是，这里的自动编译和打包用的是 xcodebuild xcrun ，关于xcodebuild xcrun的使用这里不多讲，网上一大堆，要是有不明白的，自己自行谷歌。</p>
<p>6）fir上传设置<br>上传到fir需要用到一个插件，这里是插件下载地址<br><a href="http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(6).hpi，插件下载完成后，配置到Jenkins里边" target="_blank" rel="external">http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(6).hpi，插件下载完成后，配置到Jenkins里边</a><br><img src="/img/Jenkins/25.png" alt="如图"><br><img src="/img/Jenkins/26.png" alt="如图"><br><img src="/img/Jenkins/27.png" alt="如图"><br>做完上面这一步，我们回到刚刚的项目，上传到fir其实有两种方法，一种是直接配置到脚本里边，一种是在是直接配置增加构建后操作步骤，这里主要介绍后一种，点击构建后操作步骤<br><img src="/img/Jenkins/28.png" alt="如图"><br>安装完fir的插件，这里会多一项选择，Upload to fir.im，选择这一项<br><img src="/img/Jenkins/29.png" alt="如图"><br>配置插件</p>
<ol>
<li>fir.im Token（必填）<br>fir.im Token 查看方法：直接点击 API token 进行查看.<br><img src="/img/Jenkins/30.png" alt="如图"><br>其它的都是选填的，这里不做介绍。我们只要保证项目能上传到fir上就行。<br>做完这一步我们就大功告成了，然后我们可以进行测试构建了，保存后回到刚果创建的项目，点击立即构建<br><img src="/img/Jenkins/31.png" alt="如图"><br>构建一次，各个颜色代表的意义如下：<br><img src="/img/Jenkins/32.png" alt="如图"><br>如果构建完后是蓝色的球，恭喜你，就构建成功了。如果构建失败了，可以查看构建日志，找到错误原因。<br><img src="/img/Jenkins/33.png" alt="如图"></li>
</ol>
<h3 id="完整的持续集成流程">完整的持续集成流程</h3><p>经过上面的持续化集成，现在我们就拥有了如下完整持续集成的流程<br><img src="/img/Jenkins/34.png" alt="如图"></p>
<h3 id="鸡汤来一发">鸡汤来一发</h3><p>要么忙着活，要么忙着死 —— 《肖生克的救赎》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是持续集成&quot;&gt;什么是持续集成&lt;/h3&gt;&lt;p&gt;持续集成(Continuous Integration)持续是指开发阶段，对项目进行持续性自动化编译、测试，以达到控制代码质量的手段。持续集成是一种软件开发实践。&lt;br&gt;                                                                                      — MBALab&lt;/p&gt;
&lt;h3 id=&quot;持续集成工具&quot;&gt;持续集成工具&lt;/h3&gt;&lt;p&gt;Jenkins、Travis、Gitlab、buddybuild等都是常见的持续集成工具，虽然他们都可以用于持续集成，但是不乏有各自的优缺点。综合考虑，Jenkins目前是其中使用最广泛，最主流的持续集成工具，这篇文章也是主要围绕Jenkins进行展开来讲。&lt;br&gt;Jenkins作为传统的工具，前身是Hudson，从04年到现在已经有十几年的发展历史。因为这个      工具比较常用，大家也比较认可，软件开发的各种实践也可以通过大量的插件组合来实现，可定制性也比较好。&lt;/p&gt;
&lt;h3 id=&quot;Jenkins&quot;&gt;Jenkins&lt;/h3&gt;&lt;p&gt;1、那么Jenkins 有哪些功能呢？&lt;br&gt;      （1）定时拉取代码并编译&lt;br&gt;      （2）静态代码分析&lt;br&gt;      （3）定时打包发布测试版&lt;br&gt;      （4）自定义额外的操作，如跑单元测试等&lt;br&gt;      （5）出错提醒&lt;br&gt;    基本上都是持续集成实践中的要求和周边的一些实现措施，如提醒功能等，出错后及时提醒开发者修复，Jenkins 中通过配置 SMTP 配置信息（这个一般的邮件服务提供商都有提供），邮件模板等，创建事件触发器，在事件（如编译失败）发生时，及时发送邮件通知开发者，挺方便的。&lt;br&gt;2、Jenkins流程&lt;br&gt;&lt;img src=&quot;/img/Jenkins/1.png&quot; alt=&quot;如图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="工具" scheme="https://bingoran.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="iOS" scheme="https://bingoran.github.io/tags/iOS/"/>
    
      <category term="jenkins" scheme="https://bingoran.github.io/tags/jenkins/"/>
    
      <category term="gitlab" scheme="https://bingoran.github.io/tags/gitlab/"/>
    
      <category term="fir.im" scheme="https://bingoran.github.io/tags/fir-im/"/>
    
      <category term="iOS持续集成环境搭建" scheme="https://bingoran.github.io/tags/iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods上创建专属的podspec</title>
    <link href="https://bingoran.github.io/2017/01/05/2017-1-05-CocoapodsCreatpodspec/"/>
    <id>https://bingoran.github.io/2017/01/05/2017-1-05-CocoapodsCreatpodspec/</id>
    <published>2017-01-05T12:23:10.000Z</published>
    <updated>2017-01-05T07:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景">背景</h3><p>目前而言，CocoaPods因该是我们项目第三方依赖库管理的不二选择了。什么？你还没用过CocoaPods！信不信打哭你！认真脸，可以这么说，我们项目所需要用到的主流第三方库在CocoaPods上都能找到，同时我们也可以用它来方便的管理和更新我们项目引入的第三方库。这些功能是不是已经很棒了，对于单人开发来说，其实已经够了。毕竟万事都有个然后嘛，是不。团队开发的时候，你就会发现对于项目开发而言如果没有一个很好的管理方法，开发者的项目代码就显得冗余了些，其实很多的时候，我们都是专注于自己的那块业务开发，对于团队的其它代码并不关心，加之近年组件化编程的思想也越来越流行。podspec貌似是一个不错的选择方案。艾艾～不好意思废话说得有点多。</p>
<h3 id="podspec_是什么？">podspec 是什么？</h3><p>这样说吧，其实它就是一个Git仓库，专门存放你组件代码的地方，和你平时把代码提交到自己的git或者svn没什么两样，只不过它的remote端在GitHub、CODING、Bitbucket…上而已</p>
<h3 id="创建_Spec_Repo">创建 Spec Repo</h3><p>第一步 我们需要创建一个 Git仓库<br>      前几天去CODING上注册了个账户，所以就用CODING来玩玩。当然GitHub、CODING、Bitbucket上步骤都是相似的所以大家不要惊慌。<br>      <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pod repo add [Private Repo Name] [CODING HTTPS clone URL]</span></div><div class="line">$ pod repo add LBSpceRepoTest git@git.coding.net:Ran_/LBSpceRepoTest.git</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<pre><code>如果没什么意外的话 <span class="built_in">cd</span>到~/.cocoapods/repos看下，现在应该多了个LBSpceRepoTest目录了。OK！第一步创建私有Spec Repo完成
</code></pre><p>第二步  我们需要创建一个.podspec文件<br>       自己创建一个.podspec文件的方法我在这里不想多说了，我们直接简单粗暴点，用最简单的方法来创建，避免出现遗忘或者其它错误你们会骂我。好废话少说了，接下来cd到你想创建组件项目的目录，输入以下命令<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create LBSpceRepoTest</div></pre></td></tr></table></figure></p>
<pre><code>然后会出现几个你需要填的东西，可以参照下我的步骤，不要怕，开心脸
</code></pre><p><img src="/img/Spce/1.png" alt="如图"><br>       大概意思就是，选择什么语言，是否需要创建一个demo工程，选哪个测试框架，基于视图的测试你想做什么，然后再来个屌爆了的自己的专属前缀。又搞定一步，你现在可以看到刚刚那个目录下是酱紫的<br><img src="/img/Spce/2.png" alt="如图"><br>       打开项目目录是酱紫的，现在该有的文件都有了，开心脸<br><img src="/img/Spce/3.png" alt="如图"></p>
<p>第三步  向Pods文件夹中添加库文件和资源<br>       一般来说我们的组件资源文件都是放在Pods/…/Classes 文件夹当中，如图所示，我随意添加了个DDDViewController{.m .h}文件<br><img src="/img/Spce/4.png" alt="如图"><br>       然后cd到Example文件夹 执行<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod update</div></pre></td></tr></table></figure></p>
<pre><code>然后再打开就可以看到我们刚刚添加的文件了，开心脸
</code></pre><p>第四步  提交组件代码<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit <span class="_">-s</span> -m <span class="string">"Initial Commit of Library"</span> <span class="comment">#初始化提交</span></div><div class="line">$ git remote add origin git@git.coding.net:Ran_/LBSpceRepoTest.git <span class="comment">#添加远端仓库</span></div><div class="line">$ git tag -m <span class="string">"first release"</span> 0.1.0  <span class="comment">#因为podspec文件中获取Git版本控制的项目还需要tag号，so 打上一个tag</span></div><div class="line">$ git push --tags     <span class="comment">#推送tag到远端仓库</span></div></pre></td></tr></table></figure></p>
<p>第五步  .podspec配置<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to run `pod lib lint PodLibrary.podspec' to ensure this is a</span></div><div class="line"><span class="comment"># valid spec before submitting.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Any lines starting with a # are optional, but their use is encouraged</span></div><div class="line"><span class="comment"># To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">Pod::Spec.new <span class="keyword">do</span> |s|</div><div class="line">s.name             = <span class="string">'LBSpceRepoTest'</span></div><div class="line">s.version          = <span class="string">'0.1.0'</span></div><div class="line"><span class="comment">#项目总结</span></div><div class="line">s.summary          = <span class="string">'My LBSpceRepoTest is a repo for LBSpceRepoTest'</span></div><div class="line"></div><div class="line"><span class="comment"># This description is used to generate tags and improve search results.</span></div><div class="line"><span class="comment">#   * Think: What does it do? Why did you write it? What is the focus?</span></div><div class="line"><span class="comment">#   * Try to keep it short, snappy and to the point.</span></div><div class="line"><span class="comment">#   * Write the description between the DESC delimiters below.</span></div><div class="line"><span class="comment">#   * Finally, don't worry about the indent, CocoaPods strips it!</span></div><div class="line"></div><div class="line"><span class="comment">#项目描述，貌似描述的文字要多于总结的，否则会报警告</span></div><div class="line">s.description      = &lt;&lt;-DESC</div><div class="line">My Private UIButton+Positioning assembly</div><div class="line">* MarkDown format</div><div class="line">* It is a nice world!</div><div class="line">TODO: Add long description of the pod here.</div><div class="line">DESC</div><div class="line"><span class="comment">#项目的主页，要求可以访问</span></div><div class="line">s.homepage         = <span class="string">'https://git.coding.net'</span></div><div class="line"><span class="comment">#项目的证书类型，一开始在git 就要配置好</span></div><div class="line">s.license          = &#123; :<span class="built_in">type</span> =&gt; <span class="string">'MIT'</span>, :file =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">s.author           = &#123; <span class="string">'姓名'</span> =&gt; <span class="string">'邮箱'</span> &#125; <span class="comment">#记得自己改为自己的喔</span></div><div class="line"><span class="comment">#最重要的一部分，项目的源地址，目前只支持Http\Https, 不支持SSH，小编曾经犯了一个低级错误，将这个source指向了以前建立的一个Spec.git,然后一直报"The `PodLibrary.podspec` specification does not validate"的错误，小编又不会调试，所以很丢人的折腾了两个小时。</span></div><div class="line"></div><div class="line">s.source           = &#123; :git =&gt; <span class="string">'https://git.coding.net/Ran_/LBSpceRepoTest.git'</span>, :tag =&gt; s.version.to_s &#125;</div><div class="line"><span class="comment"># s.social_media_url = 'https://twitter.com/&lt;TWITTER_USERNAME&gt;'</span></div><div class="line"></div><div class="line">s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line"><span class="comment">#表示项目的源文件在Pods/Classes文件夹下</span></div><div class="line">s.source_files = <span class="string">'LBSpceRepoTest/Classes/**/*'</span></div><div class="line"></div><div class="line"><span class="comment"># s.resource_bundles = &#123;</span></div><div class="line"><span class="comment">#   'PodLibrary' =&gt; ['LBSpceRepoTest/Assets/*.png']</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"><span class="comment">#项目的依赖库等等</span></div><div class="line"><span class="comment"># s.public_header_files = 'Pod/Classes/**/*.h'</span></div><div class="line"><span class="comment"># s.frameworks = 'UIKit', 'MapKit'</span></div><div class="line"><span class="comment"># s.dependency 'AFNetworking', '~&gt; 2.3'</span></div><div class="line">end</div></pre></td></tr></table></figure></p>
<p>第六步  本地验证<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<pre><code>如图所示，说明就是没问题的
</code></pre><p><img src="/img/Spce/5.png" alt="如图"></p>
<p>第七步  .podspec验证<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod spec lint LBSpceRepoTest.podspec</div></pre></td></tr></table></figure></p>
<pre><code>如图所示，说明就是没问题的
</code></pre><p><img src="/img/Spce/6.png" alt="如图"></p>
<p>第八步  注册Trunk<br>       小编已经猜到你没有Trunk账号了，么事，注册很简单<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 加上--verbose可以输出详细debug信息，方便出错时查看。</span></div><div class="line"><span class="comment"># pod trunk register 8888888@163.com "bingoran" --verbose</span></div><div class="line">$  pod trunk register 你的邮箱 <span class="string">"你的昵称"</span> --verbose</div></pre></td></tr></table></figure></p>
<pre><code>注册完成之后会给你的邮箱发个邮件,进入邮箱邮件里面有个链接,需要点击确认一下，<span class="ok">ok</span> 开心脸
</code></pre><p>第九步  发布<br>       <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># --use-libraries --allow-warnings</span></div><div class="line">$  pod trunk push LBSpceRepoTest.podspec</div></pre></td></tr></table></figure></p>
<pre><code>如图所示，说明发布成功了，接下来就是等待审核了，估计要个一两天吧，该做的都做了，看运气啰，开心脸
随便提醒你们一下，我这个名字已经提交过了，自己换个名字从新走一遍流程吧，什么，不愿意试，打哭你信不信！
</code></pre><p><img src="/img/Spce/7.png" alt="如图"></p>
<p>第十步  验证<br>       当然这一步是建立在审核通过了才行的，没通过的话是这个样子的<br><img src="/img/Spce/9.png" alt="如图"></p>
<pre><code><span class="comment"><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  pod search LBSpceRepoTest</div></pre></td></tr></table></figure></span>

如图所示，说明可以用了，自己在demo项目测试下吧
</code></pre><p><img src="/img/Spce/8.png" alt="如图"></p>
<h3 id="鸡汤来一发">鸡汤来一发</h3><p>要么忙着活，要么忙着死 —— 《肖生克的救赎》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;&lt;p&gt;目前而言，CocoaPods因该是我们项目第三方依赖库管理的不二选择了。什么？你还没用过CocoaPods！信不信打哭你！认真脸，可以这么说，我们项目所需要用到的主流第三方库在CocoaPods上都能找到，同时我们也可以用它来方便的管理和更新我们项目引入的第三方库。这些功能是不是已经很棒了，对于单人开发来说，其实已经够了。毕竟万事都有个然后嘛，是不。团队开发的时候，你就会发现对于项目开发而言如果没有一个很好的管理方法，开发者的项目代码就显得冗余了些，其实很多的时候，我们都是专注于自己的那块业务开发，对于团队的其它代码并不关心，加之近年组件化编程的思想也越来越流行。podspec貌似是一个不错的选择方案。艾艾～不好意思废话说得有点多。&lt;/p&gt;
&lt;h3 id=&quot;podspec_是什么？&quot;&gt;podspec 是什么？&lt;/h3&gt;&lt;p&gt;这样说吧，其实它就是一个Git仓库，专门存放你组件代码的地方，和你平时把代码提交到自己的git或者svn没什么两样，只不过它的remote端在GitHub、CODING、Bitbucket…上而已&lt;/p&gt;
&lt;h3 id=&quot;创建_Spec_Repo&quot;&gt;创建 Spec Repo&lt;/h3&gt;&lt;p&gt;第一步 我们需要创建一个 Git仓库&lt;br&gt;      前几天去CODING上注册了个账户，所以就用CODING来玩玩。当然GitHub、CODING、Bitbucket上步骤都是相似的所以大家不要惊慌。&lt;br&gt;      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pod repo add [Private Repo Name] [CODING HTTPS clone URL]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pod repo add LBSpceRepoTest git@git.coding.net:Ran_/LBSpceRepoTest.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="工具" scheme="https://bingoran.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Ios 7.1 以上系统企业级发布解决方案</title>
    <link href="https://bingoran.github.io/2015/09/03/2015-9-03-IOSAchive/"/>
    <id>https://bingoran.github.io/2015/09/03/2015-9-03-IOSAchive/</id>
    <published>2015-09-03T14:53:14.000Z</published>
    <updated>2015-09-03T16:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="鸣谢">鸣谢</h3><p>这里特别鸣谢黄灿师兄，感谢他为我们整理《Ios 7.1 以上系统企业级发布解决方案》文章，现在，我把它放到博客上面，希望对IOS开发的仁兄有帮助。</p>
<h3 id="背景">背景</h3><p>此前 iOS7.1 正式发布。此次发布带来了一个巨大变化，对于所有 iOS 企业开发人员来<br>说是个巨大的噩耗，因为原来的 HTTP 应用发布方式不再有效。<br>这个变化没有得到苹果官方的说明。尽管这样的事情并不是第一次发生，但是我们在 iOS7.1<br>上测试的结果表明，苹果再次对开发者们下“黑手”了。<br>通过 Xcode Organizer 查看 7.1 设备上的控制台，我们得到了如下信息：<br>Could not load non-https manifest URL: <a href="http://www.somedomain.com/manifest.plist" target="_blank" rel="external">http://www.somedomain.com/manifest.plist</a><br>苹果已经在 7.1 中禁止了“非 HTTPS”方式的 manifest URL。 你得将上面的 URL 改成<br><a href="https://www.somedomain.com/manifest.plist" target="_blank" rel="external">https://www.somedomain.com/manifest.plist</a> 才行。<br><a id="more"></a></p>
<h3 id="解决方案">解决方案</h3><p>1、通过dropbox 发布 plist 文件，百度随便都能找到很多片技术文章。这里不讲。（dropbox<br>经常被封，用着不爽）。<br>2、自己配置HTTPs 服务器。（此方式百度也能找到很大一堆技术文章，但是技术难度大。要<br>花很多时间，这里不讲）。<br>3、把plist 文件放在国内一家基于 https 网站上，（此方法是在谷歌上搜很久才搜到的况且现在不能谷歌了，大家懂的）他<br>就是开源中国（ <a href="http://git.oschina.net" target="_blank" rel="external">http://git.oschina.net</a> ）。国内大型网站，无被封可能，好用又免费。下面就讲<br>这种方式。</p>
<h3 id="准备">准备</h3><p>发布之前必须得到这两个东西<br>1、Xxx.ipa<br>2、Xxx.plist</p>
<p>(1).ipa 文件就是 IOS 设备的安装包，.plist 是对.ipa 文件的描叙 包括地址等信息<br>具体生成过程如下：<br>1.如图点击 Product—Scheme—-edit Scheme<br><img src="/img/Achieve/1.png" alt="如图"><br>2.如图选择 Archive右边 Build Configuration 选择 Release 点击 OK<br><img src="/img/Achieve/2.png" alt="如图"></p>
<ol>
<li>如图点击 product—-archive<br><img src="/img/Achieve/3.png" alt="如图"><br>4.这时会出现如下窗口，我们点击 distribution<br><img src="/img/Achieve/4.png" alt="如图"><br>5.选择中间的 save for enterprise or ad-hoc deployment，点击 Next<br><img src="/img/Achieve/5.png" alt="如图"><br>6.选择当前项目的发布证书点击 Export<br><img src="/img/Achieve/6.png" alt="如图"><br>7.勾上 Save For Enterprise Distribution，Application URL 填上我生成的.iPa 文件放进服务器<br>的路径，下面的空随意填。点击 save。<br><img src="/img/Achieve/7.png" alt="如图"><br>这时你就能在桌面上看到.plist 和.ipa 两个文件<br><img src="/img/Achieve/8.png" alt="如图"><br>(2)在这里我们已经得到了.ipa 和.plist 文件 下面我们要做的是把.ipa 放进我们自己的服<br>务器，把.plist 放进开源中国的服务器。<br>1.ipa 直接可以放入我们自己项目的目录下面，我们只需要一个访问地址就行了，比如plist 文件里面的路径就是上面生成 plist 文件时用的 <a href="http://11.11.11.11/Westom/file/xxx.ipa" target="_blank" rel="external">http://11.11.11.11/Westom/file/xxx.ipa</a><br>2.下一步就是把 plist 文件放入开源中国（<a href="http://git.oschina.net）。首先在开源中国注册一个账" target="_blank" rel="external">http://git.oschina.net）。首先在开源中国注册一个账</a><br>号。登陆之后点击创建项目，出现如下界面；<br><img src="/img/Achieve/9.png" alt="如图"><br>3.项目名称按项目填，千万不要选择私有项目不然访问不了，勾上使用 Readme.md 其他<br>随意填，点击创建项目。完成后出现如下界面：<br><img src="/img/Achieve/10.png" alt="如图"><br>4.点击+号 如下图 输入框填入 plist 文件名字（注意要有后缀名.plist） 把生成的 plist 文件。<br>用记事本打开，拷贝里面的东西粘贴到下面的文本域其中有一个地址这个地址就是我们.ipa<br>放入自己服务器的地址（放进浏览器必须要能访问到的）。点击提交。<br><img src="/img/Achieve/11.png" alt="如图"><br>5.如下图点击 xxx.plist<br><img src="/img/Achieve/12.png" alt="如图"><br>6.如下图点击原始数据<br><img src="/img/Achieve/13.png" alt="如图"><br>7.出现如图所示的界面<br><img src="/img/Achieve/14.png" alt="如图"><br>浏览器中的地址就是我们需要的在前面加上 <a href="https://有HTTP的只要加上" target="_blank" rel="external">https://有HTTP的只要加上</a> s 就行了（注意 plist 文件是必须要放在 https 服务器上面的，ipa 文件没要求）<br>这时我们就得到了 plist 文件的地址：<a href="https://git.oschina.net/_huangcan/dddd/raw/master/xxx.plist复制下来放入浏览器检验是否能访问到。" target="_blank" rel="external">https://git.oschina.net/_huangcan/dddd/raw/master/xxx.plist复制下来放入浏览器检验是否能访问到。</a><br>8这也是很重要的一步<br>itms-services://?action=download-manifest&amp;url=<br>之后就得到完整的访问地址在7的到底地址前面加上<br>itms-services://?action=download-manifest&amp;url=<a href="https://git.oschina.net/_huangcan/dddd/raw/mast" target="_blank" rel="external">https://git.oschina.net/_huangcan/dddd/raw/mast</a><br>er/xxx.plist<br>然后把这个链接放到我们服务器的 HTML 网页上供用户点击<br>到此 就结束了。(文采不好，不周到之处还请见谅)<br>文中涉及到开发证书，发布证书，开发者账号问题，请浏览我的另一篇文章《关于开发者的所有证书的申请与安装》</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;鸣谢&quot;&gt;鸣谢&lt;/h3&gt;&lt;p&gt;这里特别鸣谢黄灿师兄，感谢他为我们整理《Ios 7.1 以上系统企业级发布解决方案》文章，现在，我把它放到博客上面，希望对IOS开发的仁兄有帮助。&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;&lt;p&gt;此前 iOS7.1 正式发布。此次发布带来了一个巨大变化，对于所有 iOS 企业开发人员来&lt;br&gt;说是个巨大的噩耗，因为原来的 HTTP 应用发布方式不再有效。&lt;br&gt;这个变化没有得到苹果官方的说明。尽管这样的事情并不是第一次发生，但是我们在 iOS7.1&lt;br&gt;上测试的结果表明，苹果再次对开发者们下“黑手”了。&lt;br&gt;通过 Xcode Organizer 查看 7.1 设备上的控制台，我们得到了如下信息：&lt;br&gt;Could not load non-https manifest URL: &lt;a href=&quot;http://www.somedomain.com/manifest.plist&quot;&gt;http://www.somedomain.com/manifest.plist&lt;/a&gt;&lt;br&gt;苹果已经在 7.1 中禁止了“非 HTTPS”方式的 manifest URL。 你得将上面的 URL 改成&lt;br&gt;&lt;a href=&quot;https://www.somedomain.com/manifest.plist&quot;&gt;https://www.somedomain.com/manifest.plist&lt;/a&gt; 才行。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="企业发布" scheme="https://bingoran.github.io/tags/%E4%BC%81%E4%B8%9A%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>KVO与KVC</title>
    <link href="https://bingoran.github.io/2015/09/01/2015-9-01-KVC-KVO/"/>
    <id>https://bingoran.github.io/2015/09/01/2015-9-01-KVC-KVO/</id>
    <published>2015-09-01T14:53:14.000Z</published>
    <updated>2015-09-02T17:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><p>  KVC（Key–Value Coding，键值编码）KVC提供了一种在运行时而非编译时动态访问对象属性与成员变量的方式，也就是说，我们可以用字符串的内容作为属性名称或者成员变量名称进行访问。这种特性有些类似于其他高级编程语言中的反射(比如java)。简单的说它是一种可以直接通过字符串的名字(key)来访问类属性的机制。而不是通过调用Setter、Getter方法访问。</p>
<p>  KVO（Key-Value Observing，键值观察）KVO提供一种机制，当指定的对象的属性被修改后，则对象就会接受到通知。简单的说就是每次指定的被观察的对象的属性被修改后，KVO就会自动通知相应的观察者了。</p>
<p>  今天看了下KVC与KVO的相关东西，突然有了一种醍醐灌顶的感觉，以前没用过，但是今天才发现，这是个好东西啊，以前要是我们的界面上面有关于UI的变动，我们必须要对界面进行刷新后才能看到效果，然而每次的刷新必定会带来很大的内存开销，特别是我们使用UIViewTable的时候，要是数据变更多了，那么我们就需要重新处理变更所带来的界面变化，那么我们又会重新去加载cell，要是cell达到了几百的数量级，那么我么的内存实际上是需要很大的开销的，有了KVC、KVO这个问题就迎刃而解了，我们可以在可能需要变化的属性上面注册KVO,当我们的界面发生改变的时候，直接可以改变属性值，而不需要我们再次使用刷新的方式来更新界面了。</p>
<p>  在说使用KVO的时候，我想先说说KVC,因为我们要想使我们的KVO得到有效的使用，我们的对象必须是建立在支持KVC的基础之上的，先不扯淡了，我们直接进入正题吧。<br><a id="more"></a></p>
<h3 id="KVC使用">KVC使用</h3><p>关键方法所在协议：NSKeyValueCodingprotocol<br>KVC支持类对象和内建基本数据类型。<br>1.获取值方法<br>        valueForKey:，传入NSString属性的名字。<br>        valueForKeyPath:，传入NSString属性的路径，xx.xx形式。<br>        valueForUndefinedKey它的默认实现是抛出异常，可以重写这个函数做错误处理。<br>2.修改值方法<br>        setValue:forKey:<br>        setValue:forKeyPath:<br>        setValue:forUndefinedKey:<br>        setNilValueForKey: 当对非类对象属性设置nil时，调用，默认抛出异常。<br>3.一对多关系成员的情况<br>        mutableArrayValueForKey：有序一对多关系成员  NSArray<br>        mutableSetValueForKey：无序一对多关系成员  NSSet</p>
<h3 id="KVC使用案例">KVC使用案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@interface Person : NSObject&#123;    </div><div class="line">        NSString *height;  </div><div class="line">&#125; </div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Person </div><div class="line">@synthesize height;//属性height 将被监视 </div><div class="line">@end </div><div class="line"> </div><div class="line"></div><div class="line">@interface <span class="built_in">test</span>ViewController :UIViewController </div><div class="line">@property (nonatomic, retain) Person* <span class="built_in">test</span>Person; </div><div class="line">@end</div><div class="line">- (void)<span class="built_in">test</span>KVC&#123;    </div><div class="line"><span class="built_in">test</span>Person = [[Person alloc] init];        </div><div class="line">NSLog(@<span class="string">"testPerson‘s init height =%@"</span>, [<span class="built_in">test</span>Person valueForKey:@<span class="string">"height"</span>]);    </div><div class="line">[<span class="built_in">test</span>Person <span class="built_in">set</span>Value:[NSNumber numberWithInt:173]<span class="keyword">for</span>Key:@<span class="string">"height"</span>];</div><div class="line">NSLog(@<span class="string">"testPerson‘s height = %@"</span>, [<span class="built_in">test</span>Person valueForKey:@<span class="string">"height"</span>]);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：testPerson‘s init height = 0； testPerson‘s height =173；<br>注意：</p>
<p>（1）. key的值必须正确，如果拼写错误，会出现异常</p>
<p>（2）. 当key的值是没有定义的，valueForUndefinedKey:这个方法会被调用，如果你自己写了这个方法，key的值出错就会调用到这里来</p>
<p>（3）. 因为类key反复嵌套，所以有个keyPath的概念，keyPath就是用.号来把一个一个key链接起来，这样就可以根据这个路径访问下去比如：<br>          Person <em>p = [[Person alloc] init];<br>          NSString </em>personsName = [p valueForKey:@”height”];<br>          NSString *spousesName = [p valueForKeyPath:@”spouse.height”];<br>          key 与 key pat 要区分开来，key 可以从一个对象中获取值，而 key path 可以将多个 key 用点号 “.” 分割连接起来比如<br>[p valueForKeyPath:@”spouse.height”]等价于[[p valueForKey:@”spouse”] valueForKey:@”height”];</p>
<p>（4）. NSArray／NSSet等都支持KVC</p>
<h3 id="KVO使用">KVO使用</h3><p>KVO使用起来也是非常简单，其实这样的机制听起来类似Notification，但是Notification是需要一个发送Notification的对象，一般是NotificationCenter，来通知观察者。而KVO是直接通知到观察对象，使用KVO分三步，注册-实现-必要时取消观察。</p>
<p> 1.注册需要观察的对象的属性addObserver:forKeyPath:options:context:</p>
<p> 2.实现observeValueForKeyPath:ofObject:change:context:方法，这个方法当观察的属性变化时会自动调用</p>
<p> 3.取消注册观察removeObserver:forKeyPath:context:</p>
<h3 id="KVO使用案例">KVO使用案例</h3><p>这里使用一个例子，我再网上看到感觉对于理解KVO非常有帮助<a href="http://blog.csdn.net/messageloop3/article/details/8634798" target="_blank" rel="external">iOS:KVO/KVC 的概述与使用</a><br>假设一个场景,股票的价格显示在当前屏幕上，当股票价格更改的时候，实时显示更新其价格。<br>1.定义DataModel<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface StockData : NSObject &#123;  </div><div class="line">    NSString * stockName;  </div><div class="line">    <span class="built_in">float</span> price;  </div><div class="line">&#125;  </div><div class="line">@end  </div><div class="line">@implementation StockData  </div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>2.定义此model为Controller的属性，实例化它，监听它的属性，并显示在当前的View里边<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad  </div><div class="line">&#123;  </div><div class="line">    [super viewDidLoad];  </div><div class="line">  </div><div class="line">    stockForKVO = [[StockData alloc] init];  </div><div class="line">    [stockForKVO <span class="built_in">set</span>Value:@<span class="string">"searph"</span> <span class="keyword">for</span>Key:@<span class="string">"stockName"</span>];  </div><div class="line">    [stockForKVO <span class="built_in">set</span>Value:@<span class="string">"10.0"</span> <span class="keyword">for</span>Key:@<span class="string">"price"</span>];      </div><div class="line">    [stockForKVO addObserver:self <span class="keyword">for</span>KeyPath:@<span class="string">"price"</span> options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];  </div><div class="line">  </div><div class="line">    myLabel = [[UILabel alloc]initWithFrame:CGRectMake(100, 100, 100, 30 )];  </div><div class="line">    myLabel.textColor = [UIColor redColor];  </div><div class="line">    myLabel.text = [stockForKVO valueForKey:@<span class="string">"price"</span>];  </div><div class="line">    [self.view addSubview:myLabel];  </div><div class="line">     </div><div class="line">    UIButton * b = [UIButton buttonWithType:UIButtonTypeRoundedRect];  </div><div class="line">    b.frame = CGRectMake(0, 0, 100, 30);  </div><div class="line">    [b addTarget:self action:@selector(buttonAction) <span class="keyword">for</span>ControlEvents:UIControlEventTouchUpInside];  </div><div class="line">    [self.view addSubview:b];  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.当点击button的时候，调用buttonAction方法，修改对象的属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void) buttonAction  </div><div class="line">&#123;  </div><div class="line">    [stockForKVO <span class="built_in">set</span>Value:@<span class="string">"20.0"</span> <span class="keyword">for</span>Key:@<span class="string">"price"</span>];  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>实现回调方法<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context  </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>([keyPath isEqualToString:@<span class="string">"price"</span>])  </div><div class="line">    &#123;  </div><div class="line">        myLabel.text = [stockForKVO valueForKey:@<span class="string">"price"</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>5.增加观察与取消观察是成对出现的，所以需要在最后的时候，移除观察者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc  </div><div class="line">&#123;  </div><div class="line">    [super dealloc];  </div><div class="line">    [stockForKVO removeObserver:self <span class="keyword">for</span>KeyPath:@<span class="string">"price"</span>];  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>KVO这种编码方式使用起来很简单，很适用与数据模型修改后，引发的UIVIew的变化这种情况，就像上边的例子那样，当更改属性的值后，监听对象会立即得到通知。<br>注意： 需要强调的是KVO的回调要被调用，属性必须是通过KVC的方法来修改的，如果是调用类的其他方法来修改属性，这个观察者是不会得到通知的。</p>
<h3 id="KVC最佳实践">KVC最佳实践</h3><p>接下来，我们要以集合为例，来对掌握的KVC进行一下实践。</p>
<p>之所以选择array，因为在ios中，array往往做为tableview的数据源，有这样的一种情况：<br> 假设我们已经有N条数据，在进行了某个操作后，有在原先的数据后多了2条记录；或者对N中的某些数据进行更新替换。不使用KVC我们可以使用 reloadData方法或reloadRowsAtIndexPaths。前一种的弊端在于如果N很大消耗就很大。试想你只添加了几条数据却要重载之前 N数据。后一种方法的不足在于代码会很冗余，你要一次计算各个indexPath再去reload，而且还要提前想好究竟在哪些情况下会引起数据更新，倘若使用了KVC/kvo，这样的麻烦就迎刃而解了，你将不用关心追加或是更新多少条数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;&lt;p&gt;  KVC（Key–Value Coding，键值编码）KVC提供了一种在运行时而非编译时动态访问对象属性与成员变量的方式，也就是说，我们可以用字符串的内容作为属性名称或者成员变量名称进行访问。这种特性有些类似于其他高级编程语言中的反射(比如java)。简单的说它是一种可以直接通过字符串的名字(key)来访问类属性的机制。而不是通过调用Setter、Getter方法访问。&lt;/p&gt;
&lt;p&gt;  KVO（Key-Value Observing，键值观察）KVO提供一种机制，当指定的对象的属性被修改后，则对象就会接受到通知。简单的说就是每次指定的被观察的对象的属性被修改后，KVO就会自动通知相应的观察者了。&lt;/p&gt;
&lt;p&gt;  今天看了下KVC与KVO的相关东西，突然有了一种醍醐灌顶的感觉，以前没用过，但是今天才发现，这是个好东西啊，以前要是我们的界面上面有关于UI的变动，我们必须要对界面进行刷新后才能看到效果，然而每次的刷新必定会带来很大的内存开销，特别是我们使用UIViewTable的时候，要是数据变更多了，那么我们就需要重新处理变更所带来的界面变化，那么我们又会重新去加载cell，要是cell达到了几百的数量级，那么我么的内存实际上是需要很大的开销的，有了KVC、KVO这个问题就迎刃而解了，我们可以在可能需要变化的属性上面注册KVO,当我们的界面发生改变的时候，直接可以改变属性值，而不需要我们再次使用刷新的方式来更新界面了。&lt;/p&gt;
&lt;p&gt;  在说使用KVO的时候，我想先说说KVC,因为我们要想使我们的KVO得到有效的使用，我们的对象必须是建立在支持KVC的基础之上的，先不扯淡了，我们直接进入正题吧。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="KVO" scheme="https://bingoran.github.io/tags/KVO/"/>
    
      <category term="KVC" scheme="https://bingoran.github.io/tags/KVC/"/>
    
  </entry>
  
  <entry>
    <title>多线程之——浅谈NSOperation和NSOperationQueue</title>
    <link href="https://bingoran.github.io/2015/08/30/2015-8-30-NSOperation/"/>
    <id>https://bingoran.github.io/2015/08/30/2015-8-30-NSOperation/</id>
    <published>2015-08-30T14:53:14.000Z</published>
    <updated>2015-09-01T16:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><p>  iOS有三种多线程编程的技术分别是NSThread 、Cocoa NSOperation、GCD，抽象度层次是从低到高的，抽象度越高的使用越简单，也是Apple最推荐使用的。在前面呢我对GCD和NSThread的基本使用做过一些简单的总结，大家有空可以看看。</p>
<p>  NSOperation和NSOperationQueue其实也是IOS多线程推荐使用的方法之一，很多网络框架底层的实现原理也都是通过这种方式实现的。但是自己使用的话我还是推荐使用GCD或者NSThread之一，不过也不一定，开发者也可根据自己的使用习惯自己选择用什么方式来实现。因为其实三种方式都是比较简单的，但是就我个人而言，GCD、NSThread是我比较喜欢使用的。在这里我先对NSOperation的使用方式做一些简单的总结，以后用到了再来完善这篇文章。<br><a id="more"></a></p>
<h3 id="NSOperation流程">NSOperation流程</h3><p>1）先将需要执行的操作封装到一个NSOperation对象中</p>
<p>2）然后将NSOperation对象添加到NSOperationQueue中</p>
<p>3）系统会自动将NSOperationQueue中的NSOperation取出来</p>
<p>4）将取出的NSOperation封装的操作放到另外一条新线程中执行</p>
<h3 id="NSOperation">NSOperation</h3><p>  NSOperation本身是抽象基类，因此必须使用它的子类，使用NSOperation子类的方式有2种：<br>    1、Foundation框架提供了两个具体子类直接供我们使用:NSInvocationOperation和NSBlockOperation<br>    2、自定义子类继承NSOperation，实现内部相应的方法（重写main方法）<br>    3、执行操作：NSOperation调用start方法即可开始执行操作，NSOperation对象默认按同步方式执行,也就是在调用start方法的那个线程中直接执行。NSOperation对象的isConcurrent方法会告诉我们这个操作相对于调用start方法的线程,是同步还是异步执行。isConcurrent方法默认返回NO,表示操作与调用线程同步执行<br>    4、取消操作：operation开始执行之后, 默认会一直执行操作直到完成，我们也可以调用cancel方法中途取消操作<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSOperation *operation = [[NSOperation alloc] init];</div><div class="line">[operation cancel];</div></pre></td></tr></table></figure></p>
<pre><code><span class="number">5</span>、监听操作的执行：如果我们想在一个NSOperation执行完毕后做一些事情，就调用NSOperation的<span class="built_in">set</span>CompletionBlock方法来设置想做的事情
</code></pre><h3 id="NSInvocationOperation使用">NSInvocationOperation使用</h3><p>NSInvocationOperation有两种启动方式<br>第一种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self  </div><div class="line">                                                                       selector:@selector(todo:)  </div><div class="line">                                                                         object:kURL];  </div><div class="line">//将operation加入到NSOperationQueue系统自动执行</div><div class="line">NSOperationQueue *queue = [[NSOperationQueue alloc]init];  </div><div class="line">[queue addOperation:operation];</div></pre></td></tr></table></figure></p>
<p>第二种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//NSOperation:抽象类，不具备封装功能</div><div class="line">//创建操作对象，封装要执行的任务</div><div class="line">//NSInvocationOperation   封装操作</div><div class="line">NSInvocationOperation *operation=[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(<span class="built_in">test</span>) object:nil];</div><div class="line"></div><div class="line">//执行操作</div><div class="line">[operation start];</div></pre></td></tr></table></figure></p>
<p>注意：以上两种方式虽然都可以实现启动，但是他们是有区别的。操作对象默认在主线程中执行，只有添加到队列中才会开启新的线程。即默认情况下，如果操作没有放到队列中queue中，都是同步执行。只有将NSOperation放到一个NSOperationQueue中,才会异步执行操作，明白了吧，第一种异步执行，第二种同步执行。</p>
<h3 id="NSBlockOperation使用">NSBlockOperation使用</h3><p>能够并发地执行一个或多个block对象，所有相关的block都执行完之后,操作才算完成<br>创建并执行操作，其实它和NSInvocationOperation很类似，这里就不再很多的介绍了，因为启动都是类似的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSBlockOperation *blockOper =[NSBlockOperation blockOperationWithBlock:^(void)&#123;</div><div class="line">        </div><div class="line">        NSLog(@<span class="string">"执行了一个新的操作，线程：%@"</span>, [NSThread currentThread]); </div><div class="line">    </div><div class="line">    &#125;];</div><div class="line">//开始执行任务(这里还是同步执行)</div><div class="line">[blockOper start];</div></pre></td></tr></table></figure></p>
<p>通过addExecutionBlock方法添加block操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[blockOper addExecutionBlock:^(void)&#123;</div><div class="line">        </div><div class="line">         NSLog(@<span class="string">"又执行了1个新的操作，线程：%@"</span>, [NSThread currentThread]);  </div><div class="line">&#125;];</div><div class="line">    </div><div class="line">[blockOper addExecutionBlock:^() &#123;</div><div class="line">        NSLog(@<span class="string">"又执行了1个新的操作，线程：%@"</span>, [NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">    </div><div class="line">[blockOper addExecutionBlock:^() &#123;</div><div class="line">        NSLog(@<span class="string">"又执行了1个新的操作，线程：%@"</span>, [NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">[blockOper start];</div></pre></td></tr></table></figure></p>
<p>可以看出，这4个block是并发执行的，也就是在不同线程中执行的，其中num属性可以看成是线程的id<br>，只要NSBlockOperation封装的操作数大于1,就会异步执行操作 </p>
<h3 id="NSOperation加入NSOperationQueue_的使用情况">NSOperation加入NSOperationQueue 的使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    //创建NSInvocationOperation对象，封装操作</div><div class="line">    NSInvocationOperation *operation1=[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(<span class="built_in">test</span>1) object:nil];</div><div class="line">    NSInvocationOperation *operation2=[[NSInvocationOperation alloc]initWithTarget:self selector:@selector(<span class="built_in">test</span>2) object:nil];</div><div class="line">    //创建对象，封装操作</div><div class="line">    NSBlockOperation *operation3=[NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">        NSLog(@<span class="string">"NSBlockOperation3--1----%@"</span>,[NSThread currentThread]);</div><div class="line">    &#125;];</div><div class="line">    [operation3 addExecutionBlock:^&#123;</div><div class="line">        NSLog(@<span class="string">"NSBlockOperation3--2----%@"</span>,[NSThread currentThread]);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //创建NSOperationQueue</div><div class="line">    NSOperationQueue * queue=[[NSOperationQueue alloc]init];</div><div class="line">    //把操作添加到队列中</div><div class="line">    [queue addOperation:operation1];</div><div class="line">    [queue addOperation:operation2];</div><div class="line">    [queue addOperation:operation3];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)<span class="built_in">test</span>1</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"NSInvocationOperation--test1--%@"</span>,[NSThread currentThread]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)<span class="built_in">test</span>2</div><div class="line">&#123;</div><div class="line">    NSLog(@<span class="string">"NSInvocationOperation--test2--%@"</span>,[NSThread currentThread]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>系统自动将NSOperationqueue中的NSOperation对象取出，将其封装的操作放到一条新的线程中执行。上面的代码示例中，一共有四个任务，operation1和operation2分别有一个任务，operation3有两个任务。一共四个任务，开启了四条线程。队列的取出是有顺序的，与打印结果并不矛盾。这就好比，选手A,BC虽然起跑的顺序是先A,后B，然后C，但是到达终点的顺序却不一定是A,B在前，C在后。</p>
<h3 id="自定义重写方法。。。。。。待续。。。。。。">自定义重写方法。。。。。。待续。。。。。。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;&lt;p&gt;  iOS有三种多线程编程的技术分别是NSThread 、Cocoa NSOperation、GCD，抽象度层次是从低到高的，抽象度越高的使用越简单，也是Apple最推荐使用的。在前面呢我对GCD和NSThread的基本使用做过一些简单的总结，大家有空可以看看。&lt;/p&gt;
&lt;p&gt;  NSOperation和NSOperationQueue其实也是IOS多线程推荐使用的方法之一，很多网络框架底层的实现原理也都是通过这种方式实现的。但是自己使用的话我还是推荐使用GCD或者NSThread之一，不过也不一定，开发者也可根据自己的使用习惯自己选择用什么方式来实现。因为其实三种方式都是比较简单的，但是就我个人而言，GCD、NSThread是我比较喜欢使用的。在这里我先对NSOperation的使用方式做一些简单的总结，以后用到了再来完善这篇文章。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="NSOperation" scheme="https://bingoran.github.io/tags/NSOperation/"/>
    
      <category term="NSOperationQueue" scheme="https://bingoran.github.io/tags/NSOperationQueue/"/>
    
  </entry>
  
  <entry>
    <title>多线程之——NSThread</title>
    <link href="https://bingoran.github.io/2015/08/29/2015-8-29-NSThread/"/>
    <id>https://bingoran.github.io/2015/08/29/2015-8-29-NSThread/</id>
    <published>2015-08-29T14:53:14.000Z</published>
    <updated>2015-08-31T17:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><p>  iOS有三种多线程编程的技术分别是NSThread 、Cocoa NSOperation、GCD，抽象度层次是从低到高的，抽象度越高的使用越简单，也是Apple最推荐使用的。在前面呢我对GCD的基本使用做过一些简单的总结，大家有空可以看看。这里呢我主要对NSThread的一些基本的使用呢做一些基本的概括。主要是对自己进行一些总结，也希望对大家使用NSThread的开发者有用。</p>
<p>  NSThread相比其他两个的用法呢，最大的差别就是我们要对我们做的事情负责，简单来说就是我们用了它，就得需要自己管理thread的生命周期，线程之间的同步也需要自己手动添加代码，其实呢也没那么麻烦的哈，不要被吓到了。从事过java开发的人来说呢thread就更好理解了，因为他们是完全类似的。是不是已经迫不及待了，那我们就进入正题吧。</p>
<h3 id="启动方式">启动方式</h3><a id="more"></a>
<p>1、显式启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> //NSThread的创建主要有两种直接方式： </div><div class="line">[NSThread detachNewThreadSelector:@selector(todoMethod:) toTarget:self withObject:nil]; </div><div class="line"></div><div class="line">NSThread* myThread = [[NSThread alloc] initWithTarget:self </div><div class="line">                                        selector:@selector(todoMethod:) </div><div class="line">                                        object:nil]; </div><div class="line">[myThread start];</div></pre></td></tr></table></figure></p>
<p>这两种方式的区别是：前一种一调用就会立即创建一个线程来做事情；而后一种虽然你 alloc 了也 init了，但是要直到我们手动调用 start 启动线程时才会真正去创建线程。<br>这种延迟实现思想在很多跟资源相关的地方都有用到。后一种方式我们还可以在启动线程之前对线程 进行配置比如设置stack大小，给它取个名字啊什么的还有设置线程优先级都是很方便的。 </p>
<p>2、隐式启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[myObj performSelectorInBackground:@selector(myThreadMainMethod) withObject:nil];</div></pre></td></tr></table></figure></p>
<p>利用 NSObject 的类方法直接就创建了个线程，是不是更加的方便了，但是他的效果和detachNewThreadSelector:toTarget:withObject:是一样的。</p>
<h3 id="线程通讯">线程通讯</h3><p>NSThread线程通讯提供了很多的方法，包括获取主线程、子线程之间进行通讯、操作当前线程、取消发送给当前线程的消息等等<br>这里我只举每个地方使用所用到的几个方法<br>       在应用程序主线程 中做事情：<br>       performSelectorOnMainThread:withObject:waitUntilDone:<br>       performSelectorOnMainThread:withObject:waitUntilDone:modes: </p>
<pre><code>在指定 线程 中做事情： 
<span class="string">performSelector:</span><span class="string">onThread:</span><span class="string">withObject:</span><span class="string">waitUntilDone:</span> 
<span class="string">performSelector:</span><span class="string">onThread:</span><span class="string">withObject:</span><span class="string">waitUntilDone:</span><span class="string">modes:</span> 

在当前 线程 中做事情： 
<span class="string">performSelector:</span><span class="string">withObject:</span><span class="string">afterDelay:</span> 
<span class="string">performSelector:</span><span class="string">withObject:</span><span class="string">afterDelay:</span><span class="string">inModes:</span> 

取消发送给当前 线程 的某个消息 
<span class="string">cancelPreviousPerformRequestsWithTarget:</span> 
<span class="string">cancelPreviousPerformRequestsWithTarget:</span><span class="string">selector:</span><span class="string">object:</span> 
</code></pre><p>eg:[self performSelectorOnMainThread:@selector(updateUI) withObject:nil waitUntilDone:NO]搞定，使用起来很方便。</p>
<h3 id="线程同步">线程同步</h3><p>涉及到同步操作呢，学java的同学应该就不陌生了，那就是使用锁。NSThread提供了很多类型的锁NSLock、NSCondition、循环锁NSRecursiveLock，条件锁NSConditionLock，分布式锁NSDistributedLock。其中呢NSLock、NSCondition是比较常用的锁。<br>看个例子吧[参考 iOS多线程编程之NSThread的使用]（<a href="http://blog.csdn.net/totogo2010/article/details/8010231）" target="_blank" rel="external">http://blog.csdn.net/totogo2010/article/details/8010231）</a><br>NSThread的线程同步<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></div><div class="line"></div><div class="line">@class ViewController;</div><div class="line"></div><div class="line">@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;</div><div class="line">&#123;</div><div class="line">    int tickets;</div><div class="line">    int count;</div><div class="line">    NSThread* ticketsThreadone;</div><div class="line">    NSThread* ticketsThreadtwo;</div><div class="line">    NSCondition* ticketsCondition;</div><div class="line">    NSLock *theLock;</div><div class="line">&#125;</div><div class="line">@property (strong, nonatomic) UIWindow *window;</div><div class="line"></div><div class="line">@property (strong, nonatomic) ViewController *viewController;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    tickets = 100;</div><div class="line">    count = 0;</div><div class="line">    theLock = [[NSLock alloc] init];</div><div class="line">    // 锁对象</div><div class="line">    ticketsCondition = [[NSCondition alloc] init];</div><div class="line">    ticketsThreadone = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</div><div class="line">    [ticketsThreadone <span class="built_in">set</span>Name:@<span class="string">"Thread-1"</span>];</div><div class="line">    [ticketsThreadone start];</div><div class="line">    </div><div class="line">    </div><div class="line">    ticketsThreadtwo = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</div><div class="line">    [ticketsThreadtwo <span class="built_in">set</span>Name:@<span class="string">"Thread-2"</span>];</div><div class="line">    [ticketsThreadtwo start];</div><div class="line">    </div><div class="line">    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line">    // Override point <span class="keyword">for</span> customization after application launch.</div><div class="line">    self.viewController = [[ViewController alloc] initWithNibName:@<span class="string">"ViewController"</span> bundle:nil];</div><div class="line">    self.window.rootViewController = self.viewController;</div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line">    <span class="built_in">return</span> YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)run&#123;</div><div class="line">    <span class="keyword">while</span> (TRUE) &#123;</div><div class="line">        // 上锁</div><div class="line">//        [ticketsCondition lock];</div><div class="line">        [theLock lock];</div><div class="line">        <span class="keyword">if</span>(tickets &gt;= 0)&#123;</div><div class="line">            [NSThread sleepForTimeInterval:0.09];</div><div class="line">            count = 100 - tickets;</div><div class="line">            NSLog(@<span class="string">"当前票数是:%d,售出:%d,线程名:%@"</span>,tickets,count,[[NSThread currentThread] name]);</div><div class="line">            tickets--;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        [theLock unlock];</div><div class="line">//        [ticketsCondition unlock];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加上锁后呢线程使用就安全了很多，不会出现票被多卖了的情况，加上lock之后线程同步保证了数据的正确性，这里没有要求线程的顺序，所以NSCondition可以去掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#import "AppDelegate.h"</span></div><div class="line"></div><div class="line"><span class="comment">#import "ViewController.h"</span></div><div class="line"></div><div class="line">@implementation AppDelegate</div><div class="line"></div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    tickets = 100;</div><div class="line">    count = 0;</div><div class="line">    theLock = [[NSLock alloc] init];</div><div class="line">    // 锁对象</div><div class="line">    ticketsCondition = [[NSCondition alloc] init];</div><div class="line">    ticketsThreadone = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</div><div class="line">    [ticketsThreadone <span class="built_in">set</span>Name:@<span class="string">"Thread-1"</span>];</div><div class="line">    [ticketsThreadone start];</div><div class="line">    </div><div class="line">    ticketsThreadtwo = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</div><div class="line">    [ticketsThreadtwo <span class="built_in">set</span>Name:@<span class="string">"Thread-2"</span>];</div><div class="line">    [ticketsThreadtwo start];</div><div class="line">    </div><div class="line">    NSThread *ticketsThreadthree = [[NSThread alloc] initWithTarget:self selector:@selector(run3) object:nil];</div><div class="line">    [ticketsThreadthree <span class="built_in">set</span>Name:@<span class="string">"Thread-3"</span>];</div><div class="line">    [ticketsThreadthree start];    </div><div class="line">    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line">    // Override point <span class="keyword">for</span> customization after application launch.</div><div class="line">    self.viewController = [[ViewController alloc] initWithNibName:@<span class="string">"ViewController"</span> bundle:nil];</div><div class="line">    self.window.rootViewController = self.viewController;</div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line">    <span class="built_in">return</span> YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)run3&#123;</div><div class="line">    <span class="keyword">while</span> (YES) &#123;</div><div class="line">        [ticketsCondition lock];</div><div class="line">        [NSThread sleepForTimeInterval:3];</div><div class="line">        [ticketsCondition signal];</div><div class="line">        [ticketsCondition unlock];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)run&#123;</div><div class="line">    <span class="keyword">while</span> (TRUE) &#123;</div><div class="line">        // 上锁</div><div class="line">        [ticketsCondition lock];</div><div class="line">        [ticketsCondition <span class="built_in">wait</span>];</div><div class="line">        [theLock lock];</div><div class="line">        <span class="keyword">if</span>(tickets &gt;= 0)&#123;</div><div class="line">            [NSThread sleepForTimeInterval:0.09];</div><div class="line">            count = 100 - tickets;</div><div class="line">            NSLog(@<span class="string">"当前票数是:%d,售出:%d,线程名:%@"</span>,tickets,count,[[NSThread currentThread] name]);</div><div class="line">            tickets--;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        [theLock unlock];</div><div class="line">        [ticketsCondition unlock];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> [ticketsCondition signal]; 发送信号的方式，在一个线程唤醒另外一个线程的等待。wait是等待，我加了一个 线程3 去唤醒其他两个线程锁中的wait</p>
<p> 其实为了简化NSLock的使用我们还可以使用到synchronized 关键字，这个学过java的人来说又是再熟悉不过的了。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> - (void)<span class="keyword">do</span>SomeThing:(id)anObj</div><div class="line">&#123;</div><div class="line">    @synchronized(anObj)</div><div class="line">    &#123;</div><div class="line">        // to <span class="keyword">do</span> something</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;&lt;p&gt;  iOS有三种多线程编程的技术分别是NSThread 、Cocoa NSOperation、GCD，抽象度层次是从低到高的，抽象度越高的使用越简单，也是Apple最推荐使用的。在前面呢我对GCD的基本使用做过一些简单的总结，大家有空可以看看。这里呢我主要对NSThread的一些基本的使用呢做一些基本的概括。主要是对自己进行一些总结，也希望对大家使用NSThread的开发者有用。&lt;/p&gt;
&lt;p&gt;  NSThread相比其他两个的用法呢，最大的差别就是我们要对我们做的事情负责，简单来说就是我们用了它，就得需要自己管理thread的生命周期，线程之间的同步也需要自己手动添加代码，其实呢也没那么麻烦的哈，不要被吓到了。从事过java开发的人来说呢thread就更好理解了，因为他们是完全类似的。是不是已经迫不及待了，那我们就进入正题吧。&lt;/p&gt;
&lt;h3 id=&quot;启动方式&quot;&gt;启动方式&lt;/h3&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="NSThread" scheme="https://bingoran.github.io/tags/NSThread/"/>
    
  </entry>
  
  <entry>
    <title>多线程之——GCD(Grand Central Dispatch)</title>
    <link href="https://bingoran.github.io/2015/08/28/2015-8-28-GCD/"/>
    <id>https://bingoran.github.io/2015/08/28/2015-8-28-GCD/</id>
    <published>2015-08-28T14:53:14.000Z</published>
    <updated>2015-08-30T16:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GCD介绍">GCD介绍</h3><p>Grand Central Dispatch 简称（GCD）是苹果公司开发的技术，以优化的应用程序支持多核心处理器和其他的对称多处理系统的系统。这建立在任务并行执行的线程池模式的基础上的。它首次发布在Mac OS X 10.6 ，iOS 4及以上也可用。简单的说它提供了IOS多核编程的解决方法，注意她是纯C语言，并且提供了非常多强大的函数，它是基于函数使用的，而不是我们面向对象里边说的方法。</p>
<h3 id="原理">原理</h3><p> GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。一个任务可以是一个函数(function)或者是一个block。GCD的底层依然是用线程实现，不过这样可以让程序员不用关注实现的细节。GCD中的FIFO队列称为dispatchqueue，它可以保证先进来的任务先得到执行，即操作系统里边的先进先出，后进后出。<br><a id="more"></a></p>
<h3 id="种类">种类</h3><p>通常来讲dispatchqueue分为3大类Serial（串行）、Concurrent 、Main dispatch queue<br>       1.Serial<br>        又称为private dispatch queues，同时只执行一个任务。Serialqueue通常用于同步访问特定的资源或数据。当你创建多个Serialqueue时，虽然它们各自是同步执行的，但Serialqueue与Serial queue之间是并发执行的。<br>       2.Concurrent<br>       又称为global dispatch queue，可以并发地执行多个任务，但是执行完成的顺序是随机的。<br>       3.Main dispatch queue<br>       它是全局可用的serial queue，它是在应用程序主线程上执行任务的。</p>
<h3 id="用法">用法</h3><p>1、dispatch_async<br>为了避免界面在处理耗时的操作时卡死，比如读取网络数据，IO,数据库读写等，我们会在另外一个线程中处理这些操作，然后通知主线程更新界面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line"> *1.获得全局的并发队列，由于是全局的因此不需要我们回收</div><div class="line"> *2.dispatch_get_main_queue()获取主线程，并且做一些UI更新操作</div><div class="line"> *3.我们还应该明白一个概念，dispatch_async把右边的参数（任务）提交给左边的参数（队列）进行执行。（queue：队列，block：任务）</div><div class="line"> **/</div><div class="line">dispatch_queue_t queue =  dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    // 耗时的操作  </div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;  </div><div class="line">        // 更新界面  </div><div class="line">    &#125;);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>2、dispatch_group_async<br>dispatch_group_async可以实现监听一组任务是否完成，完成后得到通知执行其他的操作。这个方法很有用，比如你执行三个下载任务，当三个任务都下载完成后你才通知界面说完成的了。下面是一段例子代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*dispatch_get_global_queue参数说明右边的说明优先级，左边的是留在以后备用的，现在暂时还用不着，可以先用0代替</div><div class="line">*<span class="comment">#define DISPATCH_QUEUE_PRIORITY_HIGH 2 // 高</span></div><div class="line">*<span class="comment">#define DISPATCH_QUEUE_PRIORITY_DEFAULT 0 // 默认（中）</span></div><div class="line">*<span class="comment">#define DISPATCH_QUEUE_PRIORITY_LOW (-2) // 低</span></div><div class="line">*<span class="comment">#define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN // 后台</span></div><div class="line">**/</div><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);  </div><div class="line">dispatch_group_t group = dispatch_group_create();  </div><div class="line">dispatch_group_async(group, queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:1];  </div><div class="line">    NSLog(@<span class="string">"group1"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_group_async(group, queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:2];  </div><div class="line">    NSLog(@<span class="string">"group2"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_group_async(group, queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:3];  </div><div class="line">    NSLog(@<span class="string">"group3"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;  </div><div class="line">    NSLog(@<span class="string">"updateUi"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_release(group);</div></pre></td></tr></table></figure></p>
<p>执行结果就是group1 group2 group3 updateUi依次打印出来</p>
<p>3.dispatch_queue_create配合dispatch_async使用<br>注意：自己创建的一定要回收这里记住一个准则凡是函数名中带有create\copy\new\retain等字眼，都需要在不需要使用这个数据的时候进行release。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//创建串行队列</div><div class="line">dispatch_queue_t  queue= dispatch_queue_create(<span class="string">"zijichuangjian"</span>, NULL);</div><div class="line">//第一个参数为串行队列的名称，是c语言的字符串</div><div class="line">//第二个参数为队列的属性，一般来说串行队列不需要赋值任何属性，所以通常传空值（NULL）</div><div class="line"></div><div class="line">//2.添加任务到队列中执行</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    NSLog(@<span class="string">"任务一----%@"</span>,[NSThread currentThread]);</div><div class="line">&#125;);</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    NSLog(@<span class="string">"任务二----%@"</span>,[NSThread currentThread]);</div><div class="line">&#125;);</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    NSLog(@<span class="string">"任务三----%@"</span>,[NSThread currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//3.释放资源</div><div class="line">dispatch_release(queue);</div></pre></td></tr></table></figure></p>
<p>4.dispatch_barrier_async<br>dispatch_barrier_async是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_queue_create(<span class="string">"zijichuangjian"</span>, DISPATCH_QUEUE_CONCURRENT);  </div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:2];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async1"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:4];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async2"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_barrier_async(queue, ^&#123;  </div><div class="line">    NSLog(@<span class="string">"dispatch_barrier_async"</span>);  </div><div class="line">    [NSThread sleepForTimeInterval:4];  </div><div class="line">  </div><div class="line">&#125;);  </div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:1];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async3"</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行结果就是dispatch_async1 dispatch_async2 dispatch_barrier_async dispatch_async3依次打印出来</p>
<p>5.dispatch_apply<br>执行某个代码片段N次，相当于指定了执行次数的定时器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_apply(10, globalQ, ^(size_t index) &#123;</div><div class="line">    // 执行10次</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>6.dispatch_once_t 实现单例模式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 一次性执行：</div><div class="line"> static dispatch_once_t onceToken;</div><div class="line"> dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">     // 需要一次执行的代码</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p> 7.dispatch_after延迟执行<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//延迟时间2秒</div><div class="line">double delayInSeconds = 2.0;</div><div class="line">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);</div><div class="line">dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</div><div class="line">    // 主线程更新UI操作</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="同步异步的几点总结">同步异步的几点总结</h3><p>1.用异步函数往并发队列中添加任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//1.获得全局的并发队列</div><div class="line">dispatch_queue_t queue =  dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line"> //2.添加任务到队列中，就可以执行任务</div><div class="line"> //异步函数：具备开启新线程的能力</div><div class="line"> dispatch_async(queue, ^&#123;</div><div class="line">     NSLog(@<span class="string">"任务1----%@"</span>,[NSThread currentThread]);</div><div class="line"> &#125;);</div><div class="line"> dispatch_async(queue, ^&#123;</div><div class="line">     NSLog(@<span class="string">"任务2----%@"</span>,[NSThread currentThread]);</div><div class="line"> &#125;);</div><div class="line"> dispatch_async(queue, ^&#123;</div><div class="line">     NSLog(@<span class="string">"任务3----%@"</span>,[NSThread currentThread]);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>总结：会同时开启三个不同的子线程</p>
<p>2.用同步函数往并发队列中添加任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//1.获得全局的并发队列</div><div class="line">    dispatch_queue_t queue =  dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">     //2.添加任务到队列中，就可以执行任务</div><div class="line">     //异步函数：具备开启新线程的能力</div><div class="line">     dispatch_sync(queue, ^&#123;</div><div class="line">         NSLog(@<span class="string">"任务1----%@"</span>,[NSThread currentThread]);</div><div class="line">     &#125;);</div><div class="line">     dispatch_sync(queue, ^&#123;</div><div class="line">         NSLog(@<span class="string">"任务2----%@"</span>,[NSThread currentThread]);</div><div class="line">     &#125;);</div><div class="line">     dispatch_sync(queue, ^&#123;</div><div class="line">         NSLog(@<span class="string">"任务3----%@"</span>,[NSThread currentThread]);</div><div class="line">     &#125;);</div></pre></td></tr></table></figure></p>
<p>总结：不会开启新的线程，并发队列失去了并发的功能<br>3.用异步函数往串行队列中添加任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_queue_create(<span class="string">"zijichuangjian"</span>, DISPATCH_QUEUE_CONCURRENT);  </div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:2];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async1"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:4];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async2"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_barrier_async(queue, ^&#123;  </div><div class="line">    NSLog(@<span class="string">"dispatch_barrier_async"</span>);  </div><div class="line">    [NSThread sleepForTimeInterval:4];  </div><div class="line">  </div><div class="line">&#125;);  </div><div class="line">dispatch_async(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:1];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async3"</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>总结：会开启子线程，但是只开启一个线程<br>4.用同步函数往串行队列中添加任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_queue_create(<span class="string">"zijichuangjian"</span>, DISPATCH_QUEUE_CONCURRENT);  </div><div class="line">dispatch_sync(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:2];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async1"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_sync(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:4];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async2"</span>);  </div><div class="line">&#125;);  </div><div class="line">dispatch_barrier_async(queue, ^&#123;  </div><div class="line">    NSLog(@<span class="string">"dispatch_barrier_async"</span>);  </div><div class="line">    [NSThread sleepForTimeInterval:4];  </div><div class="line">  </div><div class="line">&#125;);  </div><div class="line">dispatch_sync(queue, ^&#123;  </div><div class="line">    [NSThread sleepForTimeInterval:1];  </div><div class="line">    NSLog(@<span class="string">"dispatch_async3"</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>总结：不会开启新的子线程</p>
<h3 id="GCD的另一个用处是可以让程序在后台较长久的运行">GCD的另一个用处是可以让程序在后台较长久的运行</h3><p>在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// AppDelegate.h文件</div><div class="line">@property (assign, nonatomic) UIBackgroundTaskIdentifier backgroundUpdateTask;</div><div class="line"></div><div class="line">// AppDelegate.m文件</div><div class="line">- (void)applicationDidEnterBackground:(UIApplication *)application</div><div class="line">&#123;</div><div class="line">    [self beingBackgroundUpdateTask];</div><div class="line">    // 在这里加上你需要长久运行的代码</div><div class="line">    [self endBackgroundUpdateTask];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)beingBackgroundUpdateTask</div><div class="line">&#123;</div><div class="line">    self.backgroundUpdateTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class="line">        [self endBackgroundUpdateTask];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)endBackgroundUpdateTask</div><div class="line">&#123;</div><div class="line">    [[UIApplication sharedApplication] endBackgroundTask: self.backgroundUpdateTask];</div><div class="line">    self.backgroundUpdateTask = UIBackgroundTaskInvalid;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考文档">参考文档</h3><p>1、  <a href="http://www.cnblogs.com/wendingding/p/3806821.html" target="_blank" rel="external">iOS开发多线程篇—GCD介绍</a><br>2、  <a href="http://www.cnblogs.com/stoic/archive/2012/09/25/2785184.html" target="_blank" rel="external">iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用</a><br>3、  <a href="http://www.cnblogs.com/pure/archive/2013/03/31/2977420.html" target="_blank" rel="external">iOS多线程GCD</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GCD介绍&quot;&gt;GCD介绍&lt;/h3&gt;&lt;p&gt;Grand Central Dispatch 简称（GCD）是苹果公司开发的技术，以优化的应用程序支持多核心处理器和其他的对称多处理系统的系统。这建立在任务并行执行的线程池模式的基础上的。它首次发布在Mac OS X 10.6 ，iOS 4及以上也可用。简单的说它提供了IOS多核编程的解决方法，注意她是纯C语言，并且提供了非常多强大的函数，它是基于函数使用的，而不是我们面向对象里边说的方法。&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;&lt;p&gt; GCD的工作原理是：让程序平行排队的特定任务，根据可用的处理资源，安排他们在任何可用的处理器核心上执行任务。一个任务可以是一个函数(function)或者是一个block。GCD的底层依然是用线程实现，不过这样可以让程序员不用关注实现的细节。GCD中的FIFO队列称为dispatchqueue，它可以保证先进来的任务先得到执行，即操作系统里边的先进先出，后进后出。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="GCD" scheme="https://bingoran.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>UITableViewCell的重用机制</title>
    <link href="https://bingoran.github.io/2015/08/27/2015-8-27-UITableViewControllerReuse/"/>
    <id>https://bingoran.github.io/2015/08/27/2015-8-27-UITableViewControllerReuse/</id>
    <published>2015-08-27T14:53:14.000Z</published>
    <updated>2015-08-30T16:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><p> UITableView相信对于诸多的从事IOS开发的人来说已经是非常熟悉的了，可以说iPhone很多应用都有使用，应该来说是一个比较频繁的组件了，对于它的很多使用技巧，我们今天就不做讨论了，这里主要说的是UITableViewCell的重用机制。</p>
<p> 对于一个好的应用开发来说，系统的架构是很重要的，必须清晰明了，各部分设计必须分工明确。比如现在很流行的MVC系统架构。把视图、模型、控制都分割开来。其实UITableViewCell设计思想也是这样的，开发者必须明白，要想达到一个很好的cell复用效果，那么我们就必须明白，把cell和数据分割开来。要是我们明白这点，那么我们在进行cell复用的时候思路就很清晰了。并且可以规避掉我们初学者看起来很无厘头的bug。比如在进行上下滑动的时候，cell重复显示了以前的，这并不是我们想看到的。</p>
<h3 id="原理">原理</h3><p> 首先我们先看段代码<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> - (UITableViewCell *)tableView:(UITableView *)table cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">    static NSString  *reusedCell= @<span class="string">"Cell"</span>; </div><div class="line"></div><div class="line">    UITableViewCell *cell = [table dequeueReusableCellWithIdentifier:reusedCell];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cell == nil) &#123;</div><div class="line"></div><div class="line">    cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:reusedCell] autorelease];</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">     //todo</div><div class="line">     <span class="built_in">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先解释一下基本的意思，首先呢我们给我们的cell取一个名字叫“Cell”，在创建的时候呢，我们先去复用容器（暂且这样说，实际上复用的cell是放在NSMutableDictnery这种容器里边的）里边根据名字寻找有没有叫“Cell”的TableViewCell，如果没有找到，那么我们就去创建一个叫“Cell”的TableViewCell，我想这样解释还算合理吧。</p>
<p>下面我们就要说说复用的时机和原理了，其实UITableView的头文件里边有这么两个东西NSMutableArray<em>  visiableCells，和NSMutableDictnery</em> reusableTableCells两个结构。其中visiableCells内保存当前显示的cells，reusableTableCells保存可重用的cells。TableView显示之初，reusableTableCells为空，那么tableView dequeueReusableCellWithIdentifier:CellIdentifier返回nil。开始的cell都是通过[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier]来创建，而且cellForRowAtIndexPath只是调用最大显示cell数的次数。明白了吧，其实开始显示的时候创建了一屏显示的UITableViewCell。<br>比如：有30条数据，iPhone一屏最多显示10个cell。程序最开始显示TableView的情况是：</p>
<pre><code>1. 用<span class="attr_selector">[[UITableViewCell alloc]</span> <span class="tag">initWithStyle</span><span class="pseudo">:UITableViewCellStyleDefault</span> <span class="tag">reuseIdentifier</span><span class="pseudo">:CellIdentifier</span>]创建10次<span class="tag">cell</span>，并给<span class="tag">cell</span>指定同样的重用标识(当然，可以为不同显示类型的<span class="tag">cell</span>指定不同的标识)。并且10个<span class="tag">cell</span>全部都加入到<span class="tag">visiableCells</span>数组，<span class="tag">reusableTableCells</span>为空。

2. 向下拖动<span class="tag">tableView</span>，当<span class="tag">cell1</span>完全移出屏幕，并且<span class="tag">cell11</span>(它也是<span class="tag">alloc</span>出来的，原因同上)完全显示出来的时候。<span class="tag">cell11</span>加入到<span class="tag">visiableCells</span>，<span class="tag">cell1</span>移出<span class="tag">visiableCells</span>，<span class="tag">cell1</span>加入到<span class="tag">reusableTableCells</span>。

3. 接着向下拖动<span class="tag">tableView</span>，因为<span class="tag">reusableTableCells</span>中已经有值，所以，当需要显示新的<span class="tag">cell</span>，<span class="tag">cellForRowAtIndexPath</span>再次被调用的时候，<span class="tag">tableView</span> <span class="tag">dequeueReusableCellWithIdentifier</span><span class="pseudo">:CellIdentifier</span>，返回<span class="tag">cell1</span>。<span class="tag">cell1</span>加入到<span class="tag">visiableCells</span>，<span class="tag">cell1</span>移出<span class="tag">reusableTableCells</span>；<span class="tag">cell2</span>移出<span class="tag">visiableCells</span>，<span class="tag">cell2</span>加入到<span class="tag">reusableTableCells</span>。之后再需要显示的<span class="tag">Cell</span>就可以正常重用了。
</code></pre><p>cell的复用流程这下就清楚了，但是，有一点需要注意的是我们需要对重用的cell做从新赋值，不要出现遗留老数据的情况，如果遗留了老数据，那么我们看到的cell就是以前使用过的相同cell。这事有一个解决办法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (cell == nil) &#123;   </div><div class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];   </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">else</span>   </div><div class="line">    &#123;   </div><div class="line">        //删除cell的所有子视图   </div><div class="line">        <span class="keyword">while</span> ([cell.contentView.subviews lastObject] != nil)   </div><div class="line">        &#123;   </div><div class="line">            [(UIView*)[cell.contentView.subviews lastObject] removeFromSuperview];   </div><div class="line">        &#125;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>删除重用的cell的所有子视图，从而得到一个没有特殊格式的cell，供其他cell重用，我们从新加入数据源。</p>
<h3 id="注意及技巧">注意及技巧</h3><p>这里还有两点需要注意的是reloadData操作和指定cell的reload操作（reloadRowsAtIndex）</p>
<pre><code><span class="bullet">1. </span>reloadData，这种情况比较特殊。一般是部分数据发生变化，需要重新刷新cell显示的内容时调用。在cellForRowAtIndexPath调用中，所有cell都是重用的。我估计reloadData调用后，把visiableCells中所有cell移入reusableTableCells，visiableCells清空。cellForRowAtIndexPath调用后，再把reuse的cell从reusableTableCells取出来，放入到visiableCells。

<span class="bullet">2. </span>reloadRowsAtIndex，刷新指定的IndexPath。如果调用时reusableTableCells为空，那么cellForRowAtIndexPath调用后，是新创建cell，新的cell加入到visiableCells。老的cell移出visiableCells，加入到reusableTableCells。于是，之后的刷新就有cell做reuse了。
</code></pre><p>这里还给大家介绍一个cell的使用技巧，当然这不是复用cell的技巧，而是不复用cell的技巧，有的时候，我们为了应对我们的需求，要求我们所使用的cell每个都不相同，甚至差别还很大，这时要求我们对每个cell进行定制，那么技巧来了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString *identifier = [NSString stringWithFormat:@<span class="string">"TimeLineCell%d%d"</span>,indexPath.section,indexPath.row];</div></pre></td></tr></table></figure></p>
<p>是不是很机制，这样就永远也不可能找得到相同名字的cell了，也就是说复用功能在这里就被巧妙的避免了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;&lt;p&gt; UITableView相信对于诸多的从事IOS开发的人来说已经是非常熟悉的了，可以说iPhone很多应用都有使用，应该来说是一个比较频繁的组件了，对于它的很多使用技巧，我们今天就不做讨论了，这里主要说的是UITableViewCell的重用机制。&lt;/p&gt;
&lt;p&gt; 对于一个好的应用开发来说，系统的架构是很重要的，必须清晰明了，各部分设计必须分工明确。比如现在很流行的MVC系统架构。把视图、模型、控制都分割开来。其实UITableViewCell设计思想也是这样的，开发者必须明白，要想达到一个很好的cell复用效果，那么我们就必须明白，把cell和数据分割开来。要是我们明白这点，那么我们在进行cell复用的时候思路就很清晰了。并且可以规避掉我们初学者看起来很无厘头的bug。比如在进行上下滑动的时候，cell重复显示了以前的，这并不是我们想看到的。&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;&lt;p&gt; 首先我们先看段代码&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="UITableViewCell" scheme="https://bingoran.github.io/tags/UITableViewCell/"/>
    
  </entry>
  
  <entry>
    <title>ViewController中LoadView,ViewDidLoad,ViewDidUnload...的调用次序及调用方法的总结</title>
    <link href="https://bingoran.github.io/2015/07/27/2015-7-27-IOSControllerLoad/"/>
    <id>https://bingoran.github.io/2015/07/27/2015-7-27-IOSControllerLoad/</id>
    <published>2015-07-27T14:53:14.000Z</published>
    <updated>2015-08-28T14:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""> </h3><p> 我们在进行IOS手机开发的时候，理解原生方法的执行次序，以及执行原理是非常重要的，我们在开发的过程当中，有的时候就是对IOS执行方法的次序及机制不够了解，进而容易犯一些比较低级的错误，而这些错误我们是完全可以轻易避免的。这篇文章是我对UIViewController里边的几个方法的调用次序做一个总结，希望以后对自己或者浏览者有用。</p>
<h3 id="一、LoadView">一、LoadView</h3><p>简单来说loadView方法是用来负责创建UIViewController的view的，也就是说当UIViewController的nib为nil的时候调用。它有两种调用方式，一种是我们重载了此方法，另一种是如果没重载调用[super loadView]</p>
<p>下面我们说说没重载的情况,也就是[super loadView]会怎样做创建view的事情<br>1.它会先去查找与UIViewController相关联的xib文件，通过加载xib文件来创建UIViewController的view，如果在初始化UIViewController指定了xib文件名，就会根据传入的xib文件名加载对应的xib文件 ，方法为<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[XibViewController alloc] initWithNibName:@<span class="string">"XibViewController"</span> bundle:nil];</div></pre></td></tr></table></figure></p>
<p>如果没有明显地传xib文件名，就会加载跟UIViewController同名的xib文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[XibViewController alloc] init];//加载XibViewController.xib</div></pre></td></tr></table></figure></p>
<p>2.如果没有找到相关联的xib文件，就会创建一个空白的UIView，然后赋值给UIViewController的view属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.view = [[UIView alloc] initWithFrame:[UIScreen mainScreen].applicationFrame];</div></pre></td></tr></table></figure></p>
<p>我们如果不希望view按上面的方式加载，那么我们也可以通过自己定义一种希望的view控件进行加载比如加载一个UIWebView<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.view = [[UIWebView alloc] initWithFrame:[UIScreen mainScreen].applicationFrame];</div></pre></td></tr></table></figure></p>
<p>当然此时不需要调用[super loadView]了，即使你调用了也不会出错，只是造成了一些不必要的开销。</p>
<h3 id="二、ViewDidLoad">二、ViewDidLoad</h3><p>viewDidLoad 此方法只有当view从nib文件初始化的时候才被调用。重载重写该方法以进一步定制符合需求的view，比如往view中添加一些子视图、从数据库或者网络加载模型数据装配到子视图中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad&#123;</div><div class="line">  </div><div class="line">    [super viewDidLoad];   </div><div class="line">    // 添加一个按钮  </div><div class="line">    UIButton *button = [UIButton buttonWithType:UIButtonTypeContactAdd];   </div><div class="line">    [self.view addSubview:button];  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="三、ViewDidUnload">三、ViewDidUnload</h3><p>要知道iOS设备的内存是极其有限的，如果应用程序占用的内存过多的话，系统就会对应用程序发出内存警告。UIViewController就会收到didReceiveMemoryWarning消息。didReceiveMemoryWarning方法的默认实现是：如果当前UIViewController的view不在应用程序的视图层次结构(View Hierarchy)中，即view的superview为nil的时候，就会将view释放，并且调用viewDidUnload方法，所以一般在释放资源，主要是释放界面元素相关的资源，将相关的实例都赋值为nil<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidUnload &#123;  </div><div class="line">    [super viewDidUnload];  </div><div class="line">    self.name = nil;  </div><div class="line">    self.pwd = nil;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="四、ViewWillAppear、ViewDidAppear">四、ViewWillAppear、ViewDidAppear</h3><p>1.当你调用pushViewController:animated把一个视图控制器压入UINavigationController的时候，UINavigationController会自动调用这些方法。<br>2.当你tabs时，UITabBarController会直接调用这些方法<br>3.当你使用presentModalViewController时也会调用方法。<br>总之当一个视图控制器的视图被添加到一个window中时也会调用这些方法</p>
<p>记住，这些方法只在这些特定的情况下控制器pushed或presented的时候被调用。在其它的情况下不会被调用，比如你添加你的视图控制器的视图作为一个视图的子视图而不是作为window的子视图。苹果官方文档说视图控制器仅用于全屏显示的视图，典型的是使用上面提到的方法。可以忽略苹果的建议使一个视图控制器关联另一个视图控制的的视图作为子视图，但是你需要在作为容器的视图控制器中手动的调用嵌套控制器的viewWillAppear和viewDidAppear。</p>
<h3 id="四、ViewWillDisappear、ViewDidDisAppear">四、ViewWillDisappear、ViewDidDisAppear</h3><p>对应上面的<br>1.当你调用PopViewController:animated把一个视图控制器退出UINavigationController的时候，UINavigationController会自动调用这些方法。<br>2.当你切换到tabs里的另外的视图时时，UITabBarController会直接调用这些方法<br>3.当你使用dismissModalViewControllerAnimated时也会调用方法。<br>总之当一个视图控制器的视图移除window时会调用这些方法</p>
<p>对上面几个方法的调用时机总结完了，我们可以流畅的使用了。总体次序呢如下<br>LoadView-&gt;viewDidLoad-&gt;viewWillAppear-&gt;viewDidAppear-&gt;viewWillDisappear-&gt;viewDidDisappear<br>关心内存的就是ViewDidUnload。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;&quot;&gt; &lt;/h3&gt;&lt;p&gt; 我们在进行IOS手机开发的时候，理解原生方法的执行次序，以及执行原理是非常重要的，我们在开发的过程当中，有的时候就是对IOS执行方法的次序及机制不够了解，进而容易犯一些比较低级的错误，而这些错误我们是完全可以轻易避免的。这篇文章是我对UIViewController里边的几个方法的调用次序做一个总结，希望以后对自己或者浏览者有用。&lt;/p&gt;
&lt;h3 id=&quot;一、LoadView&quot;&gt;一、LoadView&lt;/h3&gt;&lt;p&gt;简单来说loadView方法是用来负责创建UIViewController的view的，也就是说当UIViewController的nib为nil的时候调用。它有两种调用方式，一种是我们重载了此方法，另一种是如果没重载调用[super loadView]&lt;/p&gt;
&lt;p&gt;下面我们说说没重载的情况,也就是[super loadView]会怎样做创建view的事情&lt;br&gt;1.它会先去查找与UIViewController相关联的xib文件，通过加载xib文件来创建UIViewController的view，如果在初始化UIViewController指定了xib文件名，就会根据传入的xib文件名加载对应的xib文件 ，方法为&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="ViewController方法调用次序" scheme="https://bingoran.github.io/tags/ViewController%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%AC%A1%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>iOS强制屏幕旋转</title>
    <link href="https://bingoran.github.io/2015/06/27/2015-6-27-tranfromScreen/"/>
    <id>https://bingoran.github.io/2015/06/27/2015-6-27-tranfromScreen/</id>
    <published>2015-06-27T14:53:14.000Z</published>
    <updated>2015-08-27T15:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p> 我们开发的手机应用，为了适应客户习惯，也为了提高客户体验，有时我们不得不在手机处于不同状态的时候使我们手机屏幕也跟着旋转，但是，有的时候特殊情况下我们需要将屏幕强制旋转，以达到我们想要的效果。这里根据自己的经验为大家介绍3种强制转换的方式。</p>
<h3 id="第一种">第一种</h3><p>在我们项目的初始化文件里（也就是Delegate文件）加上下边这个方法，当然这是一个全局设置，也就是说当我们设置了这个方法后对我们整个项目都会起作用。<br><a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//添加代码禁止屏幕旋转</div><div class="line">- (NSUInteger)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> UIInterfaceOrientationMaskAll;</div><div class="line">    </div><div class="line">    <span class="keyword">else</span>  /* iphone */</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> UIInterfaceOrientationMaskPortrait ;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">   至于你想屏幕强制旋转到什么方向，设置返回参数就行了。</div></pre></td></tr></table></figure>
<h3 id="第二种">第二种</h3><p>这种是局部的屏幕旋转，只要加在相应的viewcontroller里边，在头文件（.h文件）里设置两个bool型变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic,assign) BOOL isPortraitIn_;</div><div class="line">@property (nonatomic,assign) BOOL isSettingStatusBar_;</div><div class="line">然后在.m文件里加上下面这段</div><div class="line">//横屏显示</div><div class="line">-(void)viewDidAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;</div><div class="line">    <span class="keyword">if</span> (UIInterfaceOrientationIsPortrait(orientation))</div><div class="line">    &#123;</div><div class="line">        _isPortraitIn_ = YES;</div><div class="line">        self.view.transform = CGAffineTransformMakeRotation(M_PI_2);</div><div class="line">        <span class="keyword">if</span> (orientation == UIInterfaceOrientationPortrait)</div><div class="line">        &#123;</div><div class="line">            _isSettingStatusBar_ = YES;</div><div class="line">            [[UIApplication sharedApplication]<span class="built_in">set</span>StatusBarOrientation:UIInterfaceOrientationLandscapeRight animated:NO];</div><div class="line">            _isSettingStatusBar_ = NO;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            _isSettingStatusBar_ = YES;</div><div class="line">            [[UIApplication sharedApplication]<span class="built_in">set</span>StatusBarOrientation:UIInterfaceOrientationLandscapeLeft animated:NO];</div><div class="line">            _isSettingStatusBar_ = NO;</div><div class="line">        &#125;</div><div class="line">        [self.view <span class="built_in">set</span>Frame:CGRectMake(0, -10, self.view.frame.size.height+20,self.view.frame.size.width + 20)];</div><div class="line">        [self createCustomNavBar];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第三种">第三种</h3><p>这种也是局部设置，把下面的方法加到自己的viewcontroller里边就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-(void)viewWillDisappear:(BOOL)animated</div><div class="line">&#123;   </div><div class="line"> //屏幕旋转</div><div class="line">    <span class="keyword">if</span> ([[UIDevice currentDevice] respondsToSelector:@selector(<span class="built_in">set</span>Orientation:)]) &#123;</div><div class="line">        SEL selector = NSSelectorFromString(@<span class="string">"setOrientation:"</span>);</div><div class="line">        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];</div><div class="line">        [invocation <span class="built_in">set</span>Selector:selector];</div><div class="line">        [invocation <span class="built_in">set</span>Target:[UIDevice currentDevice]];</div><div class="line">        int val = UIInterfaceOrientationPortrait;</div><div class="line">        [invocation <span class="built_in">set</span>Argument:&amp;val atIndex:2];</div><div class="line">        [invocation invoke];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;&lt;p&gt; 我们开发的手机应用，为了适应客户习惯，也为了提高客户体验，有时我们不得不在手机处于不同状态的时候使我们手机屏幕也跟着旋转，但是，有的时候特殊情况下我们需要将屏幕强制旋转，以达到我们想要的效果。这里根据自己的经验为大家介绍3种强制转换的方式。&lt;/p&gt;
&lt;h3 id=&quot;第一种&quot;&gt;第一种&lt;/h3&gt;&lt;p&gt;在我们项目的初始化文件里（也就是Delegate文件）加上下边这个方法，当然这是一个全局设置，也就是说当我们设置了这个方法后对我们整个项目都会起作用。&lt;br&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://bingoran.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://bingoran.github.io/tags/IOS/"/>
    
      <category term="转屏" scheme="https://bingoran.github.io/tags/%E8%BD%AC%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>搭建简单的MyBaties框架</title>
    <link href="https://bingoran.github.io/2015/05/21/2015-05-21-MyBatiesDemo1/"/>
    <id>https://bingoran.github.io/2015/05/21/2015-05-21-MyBatiesDemo1/</id>
    <published>2015-05-21T08:05:12.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是MyBatis?MyBatis是一个运用于持久层的数据操作框架。MyBatis是从iBatis升级而来。使用MyBatis提供的ORM机制，业务逻辑层实现人员操作的是JAVA对象，该层面与Hibernate机制中的相同。对于具体的数据库操作而言，Hibernate会自动生成SQL并执行，而MyBatis要求开发人员具体编写SQL语句。MyBatis在数据库移植性和SQL开发工作量上进行了让步，从而提升了系统设计的灵活性，扩展了其自由空间。</p>
<p>为什么需要MyBatis？系统的部分或全部数据来自现有数据库，出于安全性的考虑，只为开发团队提供几条Select SQL（或存储过程）以获取所需数据，具体的表结构不予公开。开发规范中要求，所有牵涉到业务逻辑部分的数据库操作，必须在数据库层由存储过程实现（对于金融行业而言，工商银行、中国银行和交通银行，都在开发规范中严格指定）。系统数据处理量巨大，性能要求极为苛刻，这通常意味着我们必须由经过高度优化的SQL语句（或存储过程）才能达到系统性能设计指标。</p>
<a id="more"></a>
<h3 id="工具准备">工具准备</h3><p>1：MyEclipse 10 + Jdk6.0 及以上</p>
<p>2：<a href="http://7xi2e1.com1.z0.glb.clouddn.com/MyBatisDemo1_jar.rar" target="_blank" rel="external">mybatis-3.1.1.jar + mysql-connector-5.0.3.jar</a></p>
<p>3: Junit</p>
<h3 id="准备数据">准备数据</h3><p>创建User表</p>
<table><tr><th>列名</th><th>类型</th><th>说明</th><th>约束</th></tr><tr><td>userId</td><td>int</td><td>用户ID</td><td>主键标识列</td></tr><tr><td>userName</td><td>varchar</td><td>用户姓名</td><td>不能为空</td></tr><tr><td>userPassword</td><td>varchar</td><td>用户密码</td><td>不能为空</td></tr><tr><td>userBirth</td><td>datetime</td><td>用户生日</td><td></td></tr><tr><td>userAddress</td><td>varchar</td><td>用户ID</td><td></td></tr><tr><td>userPhone</td><td>varchar</td><td>用户电话</td><td></td></tr><tr><td>userStatus</td><td>int</td><td>用户类型</td><td>0为禁用；1为普通用户（默认）；2为管理员</td></tr></table>

<h3 id="配置">配置</h3><p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/MyBaties_project.png" alt="整体结构"></p>
<p>1、使用Eclipse创建web项目MyBatisDemo1</p>
<p>2、添加所需的jar</p>
<p>下载前面提供的jar并导入到项目当中</p>
<p>3、创建mybatis-config.xml(src)文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE configuration PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></div><div class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">	&lt;!-- 配置Mybatis的环境，事务及数据源等等 --&gt;</div><div class="line">	&lt;environments default=<span class="string">"development"</span>&gt;</div><div class="line">		&lt;environment id=<span class="string">"development"</span>&gt;</div><div class="line">			&lt;transactionManager <span class="built_in">type</span>=<span class="string">"JDBC"</span> /&gt;</div><div class="line">			&lt;dataSource <span class="built_in">type</span>=<span class="string">"POOLED"</span>&gt;</div><div class="line">				&lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</div><div class="line">				&lt;!-- 数据库地址 --&gt;</div><div class="line">				&lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://127.0.0.1:3307/syprodb"</span> /&gt;</div><div class="line">				&lt;!-- 数据库用户名 --&gt;</div><div class="line">				&lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span> /&gt;</div><div class="line">				&lt;!-- 数据库密码 --&gt;</div><div class="line">				&lt;property name=<span class="string">"password"</span> value=<span class="string">"root"</span> /&gt;</div><div class="line">			&lt;/dataSource&gt;</div><div class="line">		&lt;/environment&gt;</div><div class="line">	&lt;/environments&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>4、创建实体类User.java(com.xhay1122.entity.user)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.entity.user;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class User  implements Serializable &#123;</div><div class="line">	</div><div class="line">	private static final long serialVersionUID = 1L;</div><div class="line">	private int userId;</div><div class="line">	private String userName;</div><div class="line">	private String userPassword;</div><div class="line">	private Date userBirth;</div><div class="line">	private String userAddress;</div><div class="line">	private String userPhone;</div><div class="line">	private int userStatus;</div><div class="line">	//无参数的构造函数</div><div class="line">	//getter和setter</div><div class="line">	@Override</div><div class="line">	public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="string">"User [userId="</span> + userId + <span class="string">", userName="</span> + userName</div><div class="line">				+ <span class="string">", userPassword="</span> + userPassword + <span class="string">", userBirth="</span> + userBirth</div><div class="line">				+ <span class="string">", userAddress="</span> + userAddress + <span class="string">", userPhone="</span> + userPhone</div><div class="line">				+ <span class="string">", userStatus="</span> + userStatus + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5、创建映射器的配置文件UserMapper.xml(com.xhay1122.mapper.user)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;  </div><div class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</div><div class="line"></div><div class="line">&lt;mapper namespace=<span class="string">"com.xhay1122.dao.user.UserDao"</span>&gt;</div><div class="line"></div><div class="line">	&lt;!-- 添加用户 --&gt;</div><div class="line">	&lt;insert id=<span class="string">"insertUser"</span> parameterType=<span class="string">"com.xhay1122.entity.user.User"</span>&gt;</div><div class="line">	 &lt;![CDATA[   </div><div class="line">		insert into User ( userId, userName, userPassword, userBirth, userAddress, userStatus, userPhone)</div><div class="line">         values(<span class="comment">#&#123;userId&#125;, #&#123;userName&#125;, #&#123;userPassword&#125;, #&#123;userBirth&#125;, #&#123;userAddress&#125;, #&#123;userStatus&#125;, #&#123;userPhone&#125;)	</span></div><div class="line">	]]&gt;</div><div class="line">	&lt;/insert&gt;</div><div class="line"></div><div class="line">	&lt;!-- 根据用户名和密码查询用户 --&gt;</div><div class="line">	&lt;select id=<span class="string">"selectUserByNameAndPassword"</span> parameterType=<span class="string">"com.xhay1122.entity.user.User"</span></div><div class="line">		resultType=<span class="string">"com.xhay1122.entity.user.User"</span>&gt;</div><div class="line">		&lt;![CDATA[   </div><div class="line">			select * from User </div><div class="line">		]]&gt;</div><div class="line">		&lt;<span class="built_in">where</span>&gt;</div><div class="line">			&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"userName != null"</span>&gt;</div><div class="line">				userName = <span class="comment">#&#123;userName&#125;</span></div><div class="line">			&lt;/<span class="keyword">if</span>&gt;</div><div class="line">			&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"userPassword != null"</span>&gt;</div><div class="line">				AND userPassword = <span class="comment">#&#123;userPassword&#125;</span></div><div class="line">			&lt;/<span class="keyword">if</span>&gt;</div><div class="line">		&lt;/<span class="built_in">where</span>&gt;</div><div class="line">	&lt;/select&gt;</div><div class="line">	</div><div class="line">	&lt;select id=<span class="string">"selectAllUsers"</span> resultType=<span class="string">"com.xhay1122.entity.user.User"</span>&gt;</div><div class="line">		&lt;![CDATA[   </div><div class="line">			select * from User </div><div class="line">		]]&gt;</div><div class="line">	&lt;/select&gt;</div><div class="line">&lt;/mapper&gt;</div></pre></td></tr></table></figure></p>
<p><em>补充：</em><br>namespace表示该配置文件对于映射器（UserDao）接口的完全路径。</p>
<p>insert 映射插入语句</p>
<pre><code>Id表示在命名空间中唯一的标识符，可以被用于引用该语句，与映射器接口中的方法一致时，会在该方法中使用该语句。

parameterType表示将会传入该语句的参数类的完全限定名或别名。

useGeneratedKeys表示使用JDBC的getGeneratedKeys方法取出由数据库内部生成的主键（实现标识列自动增长）。
</code></pre><p> select 映射查询语句</p>
<pre><code>Id表示在命名空间中唯一的标识符，可以被用于引用该语句，与映射器接口中的方法一致时会在该方法中使用该语句。

parameterType表示将会传入该语句的参数类的完全限定名或别名。

resultType表示从这条语句中返回的期望类型的类的完全限定名或别名，如果返回的是集合，则应是集合中包含元素的类型，而并非集合本身。
</code></pre><p>6、创建映射器UserDao.java(com.xhay1122.dao.user)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.dao.user;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import com.xhay1122.entity.user.User;</div><div class="line"></div><div class="line"></div><div class="line">public interface UserDao &#123;</div><div class="line">	//新增用户</div><div class="line">	public int insertUser(User user);</div><div class="line">	//根据用户名和密码查询用户</div><div class="line">	public User selectUserByNameAndPassword(User user);</div><div class="line">	//查询所有的用户</div><div class="line">	public List&lt;User&gt; selectAllUsers();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>7、在mybatis-config.xml中添加映射文件指向UserMapper.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;mappers&gt;</div><div class="line">	&lt;mapper resource=<span class="string">"com/xhay1122/mapper/user/UserMapper.xml"</span> /&gt;</div><div class="line">&lt;/mappers&gt;</div></pre></td></tr></table></figure></p>
<p>8、测试TestUser.java(com.xhay1122.test)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.test;</div><div class="line">import java.io.Reader;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">import org.apache.ibatis.io.Resources;</div><div class="line">import org.apache.ibatis.session.SqlSession;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactory;</div><div class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line">import org.junit.Before;</div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">import com.xhay1122.dao.user.UserDao;</div><div class="line">import com.xhay1122.entity.user.User;</div><div class="line"></div><div class="line">public class TestUser &#123;</div><div class="line"></div><div class="line">	private SqlSession session=null;</div><div class="line">	@Before</div><div class="line">	public void <span class="built_in">set</span>Up() throws Exception &#123;</div><div class="line">		String resource = <span class="string">"mybatis-configuration.xml"</span>;</div><div class="line">		Reader reader = Resources.getResourceAsReader(resource);</div><div class="line">		SqlSessionFactory sqlMapper = new SqlSessionFactoryBuilder().build(reader);</div><div class="line">		session = sqlMapper.openSession();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testInsertUser</span></span>()&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"==========testInsertUser=========="</span>);</div><div class="line">		</div><div class="line">		UserDao o = session.getMapper(UserDao.class);</div><div class="line">		User user = new User();</div><div class="line">		user.setUserId(1);</div><div class="line">		user.setUserName(<span class="string">"xhay"</span>);</div><div class="line">		user.setUserPassword(<span class="string">"20120608a"</span>);</div><div class="line">		user.setUserBirth(new Date());</div><div class="line">		System.out.println(o.insertUser(user));</div><div class="line">		session.commit(); //提交</div><div class="line">		session.close();</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"===================="</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testUserLogin</span></span>()&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"==========testUserLogin=========="</span>);</div><div class="line">		</div><div class="line">		UserDao o = session.getMapper(UserDao.class);</div><div class="line">		User user = new User();</div><div class="line">		user.setUserName(<span class="string">"xhay"</span>);</div><div class="line">		user.setUserPassword(<span class="string">"20120608a"</span>);</div><div class="line">		System.out.println(o.selectUserByNameAndPassword(user));</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"===================="</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@Test</div><div class="line">	public void <span class="function"><span class="title">testgetAllUser</span></span>()&#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"==========testgetAllUser=========="</span>);</div><div class="line">		UserDao o = session.getMapper(UserDao.class);</div><div class="line">		List&lt;User&gt; users =  o.selectAllUsers();</div><div class="line">		<span class="keyword">for</span> (int i = 0; i &lt; users.size(); i++) &#123;</div><div class="line">			System.out.println(users.get(i));</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"===================="</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/MyBatisDemo1.rar" target="_blank" rel="external">下载完整源代码</a></p>
<h3 id="推荐资料">推荐资料</h3><p>1、 <a href="http://blog.csdn.net/luanlouis/article/details/35567875" target="_blank" rel="external">Java Persistence with MyBatis 3(中文版)</a></p>
<p>2、 <a href="http://www.yiibai.com/junit/" target="_blank" rel="external">JUnit教程</a></p>
<p>3、 <a href="http://mybatis.github.io/" target="_blank" rel="external">mybatis</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是MyBatis?MyBatis是一个运用于持久层的数据操作框架。MyBatis是从iBatis升级而来。使用MyBatis提供的ORM机制，业务逻辑层实现人员操作的是JAVA对象，该层面与Hibernate机制中的相同。对于具体的数据库操作而言，Hibernate会自动生成SQL并执行，而MyBatis要求开发人员具体编写SQL语句。MyBatis在数据库移植性和SQL开发工作量上进行了让步，从而提升了系统设计的灵活性，扩展了其自由空间。&lt;/p&gt;
&lt;p&gt;为什么需要MyBatis？系统的部分或全部数据来自现有数据库，出于安全性的考虑，只为开发团队提供几条Select SQL（或存储过程）以获取所需数据，具体的表结构不予公开。开发规范中要求，所有牵涉到业务逻辑部分的数据库操作，必须在数据库层由存储过程实现（对于金融行业而言，工商银行、中国银行和交通银行，都在开发规范中严格指定）。系统数据处理量巨大，性能要求极为苛刻，这通常意味着我们必须由经过高度优化的SQL语句（或存储过程）才能达到系统性能设计指标。&lt;/p&gt;
    
    </summary>
    
      <category term="Framework" scheme="https://bingoran.github.io/categories/Framework/"/>
    
    
      <category term="MyBaties" scheme="https://bingoran.github.io/tags/MyBaties/"/>
    
  </entry>
  
  <entry>
    <title>注解方式实现登录，文件上传</title>
    <link href="https://bingoran.github.io/2015/05/07/2015-05-07-SpringMVCDemo2/"/>
    <id>https://bingoran.github.io/2015/05/07/2015-05-07-SpringMVCDemo2/</id>
    <published>2015-05-07T13:58:18.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过前面的学习，我们已经初步掌握了spring的用法，搭建简单的spring环境已经没问题了。在上一篇教程当中(<a href="/2015/04/24/2015-04-24-SpringMVCDemo1/">搭建SpringMVC框架,实现简单登陆功能</a> ),我们已经能够使用spring mvc实现简单的登陆了。</p>
<p>这次我们尝试用『注解』的方式完成以下功能：<br>    1、开发登陆功能（登陆成功跳转到登陆成功页面，失败给出相应的错误提示）<br>    2、在登陆成功页面实现文件上传，并保存到指定目录下。</p>
<a id="more"></a>
<h3 id="工具准备">工具准备</h3><p>1：MyEclipse 10 + Jdk6.0 及以上</p>
<p>2：<a href="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo2LoginAndFile_jar.rar" target="_blank" rel="external">所需Jar包</a></p>
<h3 id="大致步骤">大致步骤</h3><p>1.创建动态WEB项目</p>
<p>2.添加jar</p>
<p>3.添加注解和文件上传相关的配置</p>
<p>4.实现登陆功能</p>
<p>5.实现文件上传功能</p>
<h3 id="配置">配置</h3><p>1、使用Eclipse创建web项目SpringMVCDemo2</p>
<p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo1_1.png" alt="创建web项目"></p>
<p>2、添加所需的jar</p>
<p>下载前面提供的jar并导入到项目当中</p>
<p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo2LoginAndFile1.png" alt="添加所需jar"></p>
<p>3、配置web.xml</p>
<p>配置spring拦截的请求</p>
<p>配置乱码解决方案</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></div><div class="line">	id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</div><div class="line">	&lt;display-name&gt;SpringMVCDemo2LoginAndFile&lt;/display-name&gt;</div><div class="line"></div><div class="line">	&lt;servlet&gt;</div><div class="line">		&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</div><div class="line">		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">		&lt;init-param&gt;</div><div class="line">			&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">			&lt;param-value&gt;WEB-INF/config/applicationContext*.xml&lt;/param-value&gt;</div><div class="line">		&lt;/init-param&gt;</div><div class="line">		&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">	&lt;/servlet&gt;</div><div class="line">	&lt;servlet-mapping&gt;</div><div class="line">		&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</div><div class="line">		&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</div><div class="line">	&lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line">	&lt;!-- 乱码解决 --&gt;</div><div class="line">	&lt;filter&gt;</div><div class="line">		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</div><div class="line">		&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</div><div class="line">		&lt;init-param&gt;</div><div class="line">			&lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">			&lt;param-value&gt;UTF-8&lt;/param-value&gt;</div><div class="line">		&lt;/init-param&gt;</div><div class="line">		&lt;init-param&gt;</div><div class="line">			&lt;param-name&gt;forceEncoding&lt;/param-name&gt;</div><div class="line">			&lt;param-value&gt;<span class="literal">true</span>&lt;/param-value&gt;</div><div class="line">		&lt;/init-param&gt;</div><div class="line">	&lt;/filter&gt;</div><div class="line">	&lt;filter-mapping&gt;</div><div class="line">		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</div><div class="line">		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">	&lt;/filter-mapping&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">4、创建Spring配置文件applicationContext.xml,放到WEB-INF/config/目录下</div><div class="line"></div><div class="line">使用注解方式配置</div><div class="line"></div><div class="line">multipartResolver: 文件上传配置</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span> xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span></div><div class="line">	xsi:schemaLocation=<span class="string">"</span></div><div class="line">          http://www.springframework.org/schema/beans</div><div class="line">     	  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">       	  http://www.springframework.org/schema/context </div><div class="line">       	  http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">      	  http://www.springframework.org/schema/aop</div><div class="line">	      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">	      http://www.springframework.org/schema/tx</div><div class="line">	      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		  http://www.springframework.org/schema/jdbc </div><div class="line">		  http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd </div><div class="line">		  http://www.springframework.org/schema/mvc      </div><div class="line">          http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  </div><div class="line">		  "&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射,解决@ResponseBody乱码问题, 需要在annotation-driven之前,否则乱码问题同样无法解决 --&gt;</div><div class="line">	&lt;bean class=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"messageConverters"</span>&gt;</div><div class="line">			&lt;list&gt;</div><div class="line">				&lt;bean class=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</div><div class="line">					&lt;property name=<span class="string">"supportedMediaTypes"</span>&gt;</div><div class="line">						&lt;list&gt;</div><div class="line">							&lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</div><div class="line">						&lt;/list&gt;</div><div class="line">					&lt;/property&gt;</div><div class="line">				&lt;/bean&gt;</div><div class="line">			&lt;/list&gt;</div><div class="line">		&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- </div><div class="line">		向 spring 容器中注册 DefaultAnnotationHandlerMapping。</div><div class="line">		向 spring 容器中注册 AnnotationMethodHandlerAdapter。</div><div class="line">		配置一些 messageconverter。</div><div class="line">		解决了 @Controller 注解的使用前提配置，即 HandlerMapping 能够知道谁来处理请求。</div><div class="line">	 --&gt;</div><div class="line">	&lt;mvc:annotation-driven /&gt;</div><div class="line">	&lt;context:component-scan base-package=<span class="string">"com.xhay1122.controller"</span> /&gt;</div><div class="line">	</div><div class="line">	&lt;!-- 支持上传文件 --&gt;  </div><div class="line">    &lt;bean id=<span class="string">"multipartResolver"</span> class=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>/&gt;</div><div class="line">	</div><div class="line">	&lt;bean id=<span class="string">"viewResolver"</span></div><div class="line">		class=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">		&lt;property name=<span class="string">"viewClass"</span></div><div class="line">			value=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</div><div class="line">		&lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/"</span>&gt;&lt;/property&gt;</div><div class="line">		&lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>&gt;&lt;/property&gt;</div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">5、业务逻辑控制器</div><div class="line"></div><div class="line">*登陆：LoginController.java*</div><div class="line">``` bash</div><div class="line">package com.xhay1122.controller;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">@Controller  </div><div class="line">@RequestMapping(<span class="string">"/loginController"</span>)</div><div class="line">public class LoginController&#123;</div><div class="line"></div><div class="line">	 @RequestMapping(value=&#123;<span class="string">"/login"</span>&#125;)  </div><div class="line">	public ModelAndView handleRequest(HttpServletRequest request,</div><div class="line">			HttpServletResponse response) throws Exception &#123;</div><div class="line">		//获取表单提交数据</div><div class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</div><div class="line">		String userPwd = request.getParameter(<span class="string">"userPwd"</span>);</div><div class="line">		//创建模型视图对象用来返回</div><div class="line">		ModelAndView mav = new ModelAndView();</div><div class="line">		<span class="keyword">if</span>(<span class="string">"admin"</span>.equals(userName) &amp;&amp; <span class="string">"admin"</span>.equals(userPwd))&#123;</div><div class="line">			System.out.println(<span class="string">"登陆成功"</span>);</div><div class="line">			//将页面需要使用的数据保存</div><div class="line">			//设置视图名称</div><div class="line">			mav.setViewName(<span class="string">"redirect:/index.jsp"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"登陆失败"</span>);</div><div class="line">			mav.addObject(<span class="string">"error"</span>, <span class="string">"用户名或密码错误"</span>);</div><div class="line">			mav.setViewName(<span class="string">"/login"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">return</span> mav;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">*补充：*</div><div class="line"></div><div class="line">Spring用ModelAndView实现forward、redirect。</div><div class="line"></div><div class="line">forward是服务器内部重定向，程序收到请求后重新定向到另一个程序，客户端并不知道。浏览器地址栏的URL并不会改变。</div><div class="line"></div><div class="line">redirect则是服务器收到请求后发送一个HTTP状态头给客户，让客户将再请求一次，这里多了两次网络通信的来往。浏览器地址栏的URL会改变。</div><div class="line"></div><div class="line">若用Servlet的api，是如下的方式来实现</div><div class="line"></div><div class="line">forward： request.getRequestDispatcher(“/somePage.jsp”).forwardrequest, response);</div><div class="line"></div><div class="line">redirect： response.sendRedirect(“/somePage.jsp”);</div><div class="line"></div><div class="line">spring web framework利用ModelAndView也能实现forward、redirect</div><div class="line"></div><div class="line">``` bash</div><div class="line">forward: <span class="built_in">return</span> ModelAndView(“forward:/somePage”);</div><div class="line">redirect: <span class="built_in">return</span> ModelAndView(“redirect:/somePage”);</div></pre></td></tr></table></figure>
<p><em>文件控制器:FileController.java</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.controller;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.ResponseBody;</div><div class="line">import org.springframework.web.multipart.MultipartFile;</div><div class="line">import org.springframework.web.multipart.MultipartHttpServletRequest;</div><div class="line"></div><div class="line">@Controller</div><div class="line">@RequestMapping(<span class="string">"/fileController"</span>)</div><div class="line">public class FileController &#123;</div><div class="line"></div><div class="line">	@RequestMapping(value = <span class="string">"/upload"</span>)</div><div class="line">	@ResponseBody</div><div class="line">	public String upload(HttpServletRequest arg0,</div><div class="line">			HttpServletResponse arg1) throws Exception &#123;</div><div class="line">		MultipartHttpServletRequest mhsr = (MultipartHttpServletRequest) arg0; //转换请求为文件上传请求</div><div class="line">		MultipartFile file = mhsr.getFile(<span class="string">"upload"</span>);</div><div class="line">		System.out.println(file.getContentType());//文件类型</div><div class="line">		System.out.println(file.getSize()); // 获取文件大小</div><div class="line">		System.out.println(file.getOriginalFilename()); // 获取文件名称</div><div class="line">		<span class="keyword">if</span> (!file.isEmpty()) &#123;// 判断文件是否存在</div><div class="line">			String path =<span class="string">"I:\\worktools\\tomcat7\\webapps\\"</span>+file.getOriginalFilename();</div><div class="line">			File <span class="built_in">local</span>File = new File(path);</div><div class="line">			try &#123;</div><div class="line">				file.transferTo(<span class="built_in">local</span>File);//保存文件</div><div class="line">			&#125; catch (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">				<span class="built_in">return</span> <span class="string">"文件上传失败!!!"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> <span class="string">"文件上传成功!!!"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6、JSP页面</p>
<p><em>登陆界面：login.jsp</em></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;用户登录&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	<span class="variable">$&#123;error &#125;</span></div><div class="line">	&lt;form action=<span class="string">"loginController/login.do"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">		用户名:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"userName"</span> /&gt;&lt;br /&gt;</div><div class="line">		密&amp;nbsp;码:&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"userPwd"</span> /&gt;&lt;br /&gt;</div><div class="line">		&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"登陆"</span> /&gt;</div><div class="line">		&lt;input <span class="built_in">type</span>=<span class="string">"reset"</span> value=<span class="string">"重置"</span> /&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">	</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><em>文件上传:index.jsp</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;上传文件&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;form action=<span class="string">"fileController/upload.do"</span> method=<span class="string">"post"</span></div><div class="line">		enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">		选择文件:&lt;input <span class="built_in">type</span>=<span class="string">"file"</span> name=<span class="string">"upload"</span> /&gt;&lt;br /&gt; &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span></div><div class="line">			value=<span class="string">"上传"</span> /&gt; &lt;input <span class="built_in">type</span>=<span class="string">"reset"</span> value=<span class="string">"重置"</span> /&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="效果截图">效果截图</h3><p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo2LoginAndFile2.png" alt="登录界面"></p>
<p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo2LoginAndFile3.png" alt="文件上传"></p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo2LoginAndFile.rar" target="_blank" rel="external">下载完整源代码</a></p>
<h3 id="推荐资料">推荐资料</h3><p>1、 <a href="http://my.oschina.net/abian/blog/128028" target="_blank" rel="external">Spring MVC 中的基于注解的 Controller</a></p>
<p>2、 <a href="http://blog.csdn.net/lufeng20/article/details/7598801" target="_blank" rel="external"> SpringMVC 基于注解的Controller @RequestMapping</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过前面的学习，我们已经初步掌握了spring的用法，搭建简单的spring环境已经没问题了。在上一篇教程当中(&lt;a href=&quot;/2015/04/24/2015-04-24-SpringMVCDemo1/&quot;&gt;搭建SpringMVC框架,实现简单登陆功能&lt;/a&gt; ),我们已经能够使用spring mvc实现简单的登陆了。&lt;/p&gt;
&lt;p&gt;这次我们尝试用『注解』的方式完成以下功能：&lt;br&gt;    1、开发登陆功能（登陆成功跳转到登陆成功页面，失败给出相应的错误提示）&lt;br&gt;    2、在登陆成功页面实现文件上传，并保存到指定目录下。&lt;/p&gt;
    
    </summary>
    
      <category term="Framework" scheme="https://bingoran.github.io/categories/Framework/"/>
    
    
      <category term="springMVC" scheme="https://bingoran.github.io/tags/springMVC/"/>
    
      <category term="spring" scheme="https://bingoran.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://bingoran.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="登陆" scheme="https://bingoran.github.io/tags/%E7%99%BB%E9%99%86/"/>
    
  </entry>
  
  <entry>
    <title>Canvas斜切快速实现</title>
    <link href="https://bingoran.github.io/2015/04/27/2015-4-27-Canvas-tranfrom/"/>
    <id>https://bingoran.github.io/2015/04/27/2015-4-27-Canvas-tranfrom/</id>
    <published>2015-04-27T14:53:14.000Z</published>
    <updated>2015-08-30T16:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用篇">使用篇</h3><p>最近做项目遇到一个需求，首页界面采取斜切风格，开始拿到这个问题的时候考虑过几种方案。一是用svg来解决不规则图形的问题，但是貌似这种东西对于我们来说属于嵌入式开发了比较麻烦，二是用CSS3提供的新属性方法transform来解决问题，transform提供了三种操作元素的属性。<br>﻿﻿<br>matrix，translate旋转，scale缩放，和拉伸。貌似具备了这几个条件我们的问题就可以得到解决了，但是前面我们说过，我们要求的是用不规则图形的斜切界面，transform固然好用，细细琢磨其实它只能满足一般的需求，就是对图形进行缩放和旋转固然是没什么问题，但是要图形做成不规则斜切这就是个麻烦的事情了，但是对于一般的只需做成平行四边形或者更简单的图形还是推荐使用transform的。所以综合考虑，还是选择使用canvas来解决我们的问题需求。话不多说了进入正题。<br>      canvas的强大对于使用过的人来说毋庸置疑，不仅可以实现各种动画和制作游戏，它的诞生对于开发人员来说简直就是惊喜。这里我只简单的介绍通过它来实现不规则图形或者斜切风格。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;strong&gt;这是原图&lt;/strong&gt;</div><div class="line">  &lt;p&gt;</div><div class="line">   &lt;img src=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span></div><div class="line">    width=<span class="string">"256"</span> height=<span class="string">"191"</span>&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">   &lt;strong&gt;这是Canvas斜切实现&lt;/strong&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  </div><div class="line">  &lt;!-- 注明当不支持canvas的浏览器 --&gt;</div><div class="line">  &lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"256"</span> height=<span class="string">"191"</span>&gt;您的浏览器不支持canvas标签。&lt;/canvas&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line"> &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    //初始化一个Image对象</div><div class="line">      var canvasImage=new Image();</div><div class="line">      //赋值图片地址</div><div class="line">      canvasImage.src = <span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span>;</div><div class="line">      //获取Canvas对象(画布)</div><div class="line">    var canvas = document.getElementById(<span class="string">"canvas"</span>);</div><div class="line">    //简单地检测当前浏览器是否支持Canvas对象，以免在一些不支持html5的浏览器中提示语法错误</div><div class="line">    <span class="keyword">if</span>(canvas.getContext)&#123;  </div><div class="line">        //获取对应的CanvasRenderingContext2D对象(画笔)</div><div class="line">        var ctx = canvas.getContext(<span class="string">"2d"</span>);  </div><div class="line">        </div><div class="line">        var drawimage = <span class="keyword">function</span>(canvasImage) &#123;</div><div class="line">           //保存画布当前状态</div><div class="line">           ctx.save();</div><div class="line">           //开始一个新的绘制路径</div><div class="line">            ctx.beginPath();</div><div class="line">            //设置线条颜色为蓝色</div><div class="line">            ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">            //设置路径起点坐标</div><div class="line">            ctx.moveTo(0, 0);</div><div class="line">            ctx.lineTo(0, 180);</div><div class="line">            ctx.lineTo(230, 191);</div><div class="line">            ctx.lineTo(256, 100);</div><div class="line">            //先关闭绘制路径。注意，此时将会使用直线连接当前端点和起始端点。</div><div class="line">            ctx.closePath();</div><div class="line">          ctx.clip();</div><div class="line">          ctx.drawImage(canvasImage, 0, 0,256,191);</div><div class="line">         ctx.restore();</div><div class="line">        &#125;;</div><div class="line">        //必须图片加载完后在进行绘图</div><div class="line">       canvasImage.onload = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        drawimage(this);</div><div class="line">       &#125;;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="这样就轻松实现了斜切风格了_，ok问题解决。需求实现。">这样就轻松实现了斜切风格了 ，ok问题解决。需求实现。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用篇&quot;&gt;使用篇&lt;/h3&gt;&lt;p&gt;最近做项目遇到一个需求，首页界面采取斜切风格，开始拿到这个问题的时候考虑过几种方案。一是用svg来解决不规则图形的问题，但是貌似这种东西对于我们来说属于嵌入式开发了比较麻烦，二是用CSS3提供的新属性方法transform来解决问题，transform提供了三种操作元素的属性。&lt;br&gt;﻿﻿&lt;br&gt;matrix，translate旋转，scale缩放，和拉伸。貌似具备了这几个条件我们的问题就可以得到解决了，但是前面我们说过，我们要求的是用不规则图形的斜切界面，transform固然好用，细细琢磨其实它只能满足一般的需求，就是对图形进行缩放和旋转固然是没什么问题，但是要图形做成不规则斜切这就是个麻烦的事情了，但是对于一般的只需做成平行四边形或者更简单的图形还是推荐使用transform的。所以综合考虑，还是选择使用canvas来解决我们的问题需求。话不多说了进入正题。&lt;br&gt;      canvas的强大对于使用过的人来说毋庸置疑，不仅可以实现各种动画和制作游戏，它的诞生对于开发人员来说简直就是惊喜。这里我只简单的介绍通过它来实现不规则图形或者斜切风格。&lt;/p&gt;
    
    </summary>
    
      <category term="技术实现" scheme="https://bingoran.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="canvas" scheme="https://bingoran.github.io/tags/canvas/"/>
    
      <category term="斜切风格" scheme="https://bingoran.github.io/tags/%E6%96%9C%E5%88%87%E9%A3%8E%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>搭建SpringMVC框架,实现简单登陆功能</title>
    <link href="https://bingoran.github.io/2015/04/24/2015-04-24-SpringMVCDemo1/"/>
    <id>https://bingoran.github.io/2015/04/24/2015-04-24-SpringMVCDemo1/</id>
    <published>2015-04-24T01:56:08.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>阅读本篇文章之前建议先阅读以下前面两篇关于Spring的简单配置，Spring这系列的教程主要是为了让给初学者可以快速的掌握Spring的相关配置，如果希望应用于实际项目，还需要深入学习。</p>
<p>本次教程主要是使用简单配置实现用户登录验证功能。<br>要求：<br>    1、搭建简单的Spring MVC框架<br>    2、开发登陆功能（登陆成功跳转到欢迎页面，失败给出相应的提示）</p>
<a id="more"></a>
<h3 id="工具准备">工具准备</h3><p>1：MyEclipse 10 + Jdk6.0 及以上</p>
<p>2：<a href="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo1_jar.rar" target="_blank" rel="external">所需Jar包</a></p>
<h3 id="大致步骤">大致步骤</h3><p>1.创建动态WEB项目</p>
<p>2.添加jar</p>
<p>3.编写模型层代码</p>
<p>4.编写业务层代码</p>
<p>5.编写控制器类</p>
<p>6.添加配置文件</p>
<p>7.编写JSP</p>
<h3 id="配置">配置</h3><p>1、使用Eclipse创建web项目SpringMVCDemo1</p>
<p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo1_1.png" alt="创建web项目"></p>
<p>2、添加所需的jar</p>
<p>下载前面提供的jar并导入到项目当中</p>
<p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDEMO1_2.png" alt="创建web项目"></p>
<p>3、配置web.xml</p>
<p>核心控制器是一个叫做DispatcherServlet的类完成用于拦截特定的请求</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</div><div class="line">  &lt;display-name&gt;SpringMVCDemo1&lt;/display-name&gt;</div><div class="line">  &lt;servlet&gt;</div><div class="line">  	&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</div><div class="line">  	&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">  	&lt;init-param&gt;</div><div class="line">  		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">  		&lt;param-value&gt;WEB-INF/config/applicationContext*.xml&lt;/param-value&gt;</div><div class="line">  	&lt;/init-param&gt;</div><div class="line">  	&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</div><div class="line">  &lt;/servlet&gt;</div><div class="line">  &lt;servlet-mapping&gt;</div><div class="line">  	&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</div><div class="line">  	&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</div><div class="line">  &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">4、创建Spring配置文件applicationContext.xml,放到WEB-INF/config/目录下</div><div class="line"></div><div class="line">Bean Name:被请求地址</div><div class="line"></div><div class="line">Bean Class : 用来处理请求的控制器</div><div class="line"></div><div class="line">``` bash</div><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></div><div class="line">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;</div><div class="line"></div><div class="line">&lt;bean name=<span class="string">"/login.html"</span> class=<span class="string">"com.xhay1122.controller.LoginController"</span> scope=<span class="string">"prototype"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">5、业务逻辑控制器LoginController.java</div><div class="line"></div><div class="line">实现业务逻辑控制器的方式主要四种（本教程使用的是第一种方式）.</div><div class="line"></div><div class="line">	1).实现Controller接口 org.springframework.web.servlet.mvc.Controller</div><div class="line"></div><div class="line">	2).继承AbstarctController抽象类 org.springframework.web.servlet.mvc.AbstractController</div><div class="line"></div><div class="line">	3). MultiActionController org.springframework.web.servlet.mvc.multiaction.MultiActionController</div><div class="line"></div><div class="line">	4).通过注解快速实现业务逻辑控制器 @Controller配合@RequestMapping实现</div><div class="line"></div><div class="line">``` bash</div><div class="line">package com.xhay1122.controller;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line">import org.springframework.web.servlet.mvc.Controller;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 项目名称：SpringMVCDemo1</div><div class="line"> * 类名称：LoginController</div><div class="line"> * 类描述：   </div><div class="line"> * 创建人：xhay</div><div class="line"> * 创建时间：2015年4月23日 下午4:09:56</div><div class="line"> * 修改人：xhay</div><div class="line"> * 修改时间：2015年4月23日 下午4:09:56</div><div class="line"> * 修改备注：   </div><div class="line"> * @version 1.0</div><div class="line"> * 软件工程创新实验室  </div><div class="line"> */</div><div class="line">public class LoginController implements Controller&#123;</div><div class="line">	</div><div class="line">	public ModelAndView handleRequest(HttpServletRequest request,</div><div class="line">			HttpServletResponse response) throws Exception &#123;</div><div class="line">		//获取表单提交数据</div><div class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</div><div class="line">		String userPwd = request.getParameter(<span class="string">"userPwd"</span>);</div><div class="line">		//创建模型视图对象用来返回</div><div class="line">		ModelAndView mav = new ModelAndView();</div><div class="line">		<span class="keyword">if</span>(<span class="string">"admin"</span>.equals(userName) &amp;&amp; <span class="string">"admin"</span>.equals(userPwd))&#123;</div><div class="line">			//将页面需要使用的数据保存</div><div class="line">			mav.addObject(<span class="string">"currentUserName"</span>, userName);</div><div class="line">			//设置视图名称</div><div class="line">			mav.setViewName(<span class="string">"/index.jsp"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			mav.addObject(<span class="string">"error"</span>, <span class="string">"用户名或密码错误"</span>);</div><div class="line">			mav.setViewName(<span class="string">"/login.jsp"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">return</span> mav;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">6、登录页面</div><div class="line">``` bash</div><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;用户登录&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	<span class="variable">$&#123;error &#125;</span></div><div class="line">	&lt;form action=<span class="string">"login.html"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">		用户名:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"userName"</span> /&gt;&lt;br /&gt;</div><div class="line">		密&amp;nbsp;&amp;nbsp;码:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"userPwd"</span> /&gt;&lt;br /&gt;</div><div class="line">		&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"登陆"</span> /&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">	</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>7、欢迎界面index.jsp</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></div><div class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	当前登陆的用户名<span class="variable">$&#123;currentUserName &#125;</span></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="效果截图">效果截图</h3><p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDEMO1_3.png" alt="登录界面"></p>
<p><img src="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDEMO1_4.png" alt="登录成功"></p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/SpringMVCDemo1.rar" target="_blank" rel="external">下载完整源代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读本篇文章之前建议先阅读以下前面两篇关于Spring的简单配置，Spring这系列的教程主要是为了让给初学者可以快速的掌握Spring的相关配置，如果希望应用于实际项目，还需要深入学习。&lt;/p&gt;
&lt;p&gt;本次教程主要是使用简单配置实现用户登录验证功能。&lt;br&gt;要求：&lt;br&gt;    1、搭建简单的Spring MVC框架&lt;br&gt;    2、开发登陆功能（登陆成功跳转到欢迎页面，失败给出相应的提示）&lt;/p&gt;
    
    </summary>
    
      <category term="Framework" scheme="https://bingoran.github.io/categories/Framework/"/>
    
    
      <category term="springMVC" scheme="https://bingoran.github.io/tags/springMVC/"/>
    
      <category term="spring" scheme="https://bingoran.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://bingoran.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="登陆" scheme="https://bingoran.github.io/tags/%E7%99%BB%E9%99%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP的应用</title>
    <link href="https://bingoran.github.io/2015/04/09/2015-04-09-Spring3AOP/"/>
    <id>https://bingoran.github.io/2015/04/09/2015-04-09-Spring3AOP/</id>
    <published>2015-04-09T12:35:24.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你阅读了上一篇文章<a href="http://xhay1122.com/2015/04/09/2015-04-09-Spring3test/" target="_blank" rel="external">Spring的简单配置</a>,相信你已经会搭建一个简单Spring IOC的框架了。那么说到IOC我们往往会联想到Spring AOP(面向切面编程),这次教程我们就来搭建一个简单的AOP框架，体验一下AOP的使用和好处。</p>
<a id="more"></a>
<p>为了清晰，我已经给出完整的搭建教程，本教程主要是用注解方式实现的，还有直接通过配置实现AOp的，这里就不详细讲解了，在后面直接给出源码。</p>
<h3 id="工具准备">工具准备</h3><p>1：MyEclipse 10 + Jdk6.0 及以上</p>
<p>2：<a href="http://7xi2e1.com1.z0.glb.clouddn.com/spring-framework-3.2.2.RELEASE-dist.zip" target="_blank" rel="external">spring-framework-3.2.2.RELEASE-dist.zip</a> + commons-logging-1.1.3.jar(Java日志实现) + 由于Spring3.2.2官方源代码中没有提供AOP，所以需要添加aopalliance-1.0.jar、aspectjrt.jar、aspectjweaver.jar</p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/Spring3AOPjar.rar" target="_blank" rel="external">下载完整jar包</a></p>
<h3 id="构建环境">构建环境</h3><p>1：在MyEclipse里面新建一个工程，并命名称是Spring3AOP2</p>
<p>2：把我提供的jar包放入项目的lib文件夹下。</p>
<h3 id="配置文件">配置文件</h3><p>1: 编写业务类HelloServiceImpl.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.spring3.aop;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line">* 项目名称：Spring3AOP</div><div class="line">* 类名称：HelloServiceImpl</div><div class="line">* 类描述：   目标对象</div><div class="line">* 创建人：xhay</div><div class="line">* 创建时间：2015-4-9 下午4:23:20</div><div class="line">* 修改人：xhay</div><div class="line">* 修改时间：2015-4-9 下午4:23:20</div><div class="line">* 修改备注：   </div><div class="line">* @version 1.0</div><div class="line">* 软件工程创新实验室  </div><div class="line">*/ </div><div class="line">public class HelloServiceImpl  &#123;</div><div class="line"></div><div class="line">	public String say(String _msg) &#123;</div><div class="line">		System.out.println(<span class="string">"HelloServiceImpl.say(msg:"</span> + _msg + <span class="string">")"</span>);</div><div class="line">		<span class="built_in">return</span> _msg;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>切面处理类TestAnnotationAspect.java</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.spring3.aop;</div><div class="line"></div><div class="line">import org.aspectj.lang.JoinPoint;</div><div class="line">import org.aspectj.lang.ProceedingJoinPoint;</div><div class="line">import org.aspectj.lang.annotation.After;</div><div class="line">import org.aspectj.lang.annotation.AfterReturning;</div><div class="line">import org.aspectj.lang.annotation.AfterThrowing;</div><div class="line">import org.aspectj.lang.annotation.Around;</div><div class="line">import org.aspectj.lang.annotation.Aspect;</div><div class="line">import org.aspectj.lang.annotation.Before;</div><div class="line">import org.aspectj.lang.annotation.Pointcut;</div><div class="line"></div><div class="line">@Aspect</div><div class="line">public class TestAnnotationAspect &#123;</div><div class="line"></div><div class="line">	@Pointcut(<span class="string">"execution(* com.xhay1122.spring3.aop.*.*(..))"</span>)</div><div class="line">	private void <span class="function"><span class="title">pointCutMethod</span></span>() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//声明前置通知</div><div class="line">	@Before(<span class="string">"pointCutMethod()"</span>)</div><div class="line">	public void <span class="keyword">do</span>Before(JoinPoint jp) &#123;</div><div class="line">		System.out.println(<span class="string">"前置通知"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//声明后置通知</div><div class="line">	@AfterReturning(pointcut = <span class="string">"pointCutMethod()"</span>, returning = <span class="string">"result"</span>)</div><div class="line">	public void <span class="keyword">do</span>AfterReturning(String result) &#123;</div><div class="line">		System.out.println(<span class="string">"后置通知"</span>);</div><div class="line">		System.out.println(<span class="string">"---"</span> + result + <span class="string">"---"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//声明例外通知</div><div class="line">	@AfterThrowing(pointcut = <span class="string">"pointCutMethod()"</span>, throwing = <span class="string">"e"</span>)</div><div class="line">	public void <span class="keyword">do</span>AfterThrowing(Exception e) &#123;</div><div class="line">		System.out.println(<span class="string">"例外通知"</span>);</div><div class="line">		System.out.println(e.getMessage());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//声明最终通知</div><div class="line">	@After(<span class="string">"pointCutMethod()"</span>)</div><div class="line">	public void <span class="keyword">do</span>After(JoinPoint jp) &#123;</div><div class="line">		System.out.println(<span class="string">"最终通知"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//声明环绕通知</div><div class="line">	@Around(<span class="string">"pointCutMethod()"</span>)</div><div class="line">	public Object <span class="keyword">do</span>Around(ProceedingJoinPoint pjp) throws Throwable &#123;</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"进入方法---环绕通知"</span>);</div><div class="line">		long time = System.currentTimeMillis();</div><div class="line">		Object o = pjp.proceed();</div><div class="line">		time = System.currentTimeMillis() - time;</div><div class="line">		System.out.println(<span class="string">"执行: "</span> + time + <span class="string">" ms"</span>);</div><div class="line">		System.out.println(<span class="string">"退出方法---环绕通知"</span>);</div><div class="line">		<span class="built_in">return</span> o;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2：在src目录下面创建一个Spring的配置文件applicationContext.xml，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	   xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       xsi:schemaLocation=<span class="string">"</span></div><div class="line">          http://www.springframework.org/schema/beans</div><div class="line">     	  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">       	  http://www.springframework.org/schema/context </div><div class="line">       	  http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">      	  http://www.springframework.org/schema/aop</div><div class="line">	      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">	      http://www.springframework.org/schema/tx</div><div class="line">	      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		  "&gt;</div><div class="line"></div><div class="line">	&lt;aop:aspectj-autoproxy /&gt;</div><div class="line">	&lt;!-- &lt;bean class=<span class="string">"org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"</span> /&gt; --&gt;</div><div class="line">      </div><div class="line">	&lt;bean id=<span class="string">"aspectBean"</span> class=<span class="string">"com.xhay1122.spring3.aop.TestAnnotationAspect"</span> /&gt;</div><div class="line">    &lt;bean id=<span class="string">"aService"</span> class=<span class="string">"com.xhay1122.spring3.aop.HelloServiceImpl"</span>&gt;&lt;/bean&gt;  </div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>3: 编写测试代码AOPClient.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.spring3.test;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.xhay1122.spring3.aop.HelloServiceImpl;</div><div class="line"></div><div class="line">public class AOPClient &#123;</div><div class="line"></div><div class="line">	/** </div><div class="line">	 * @Title: main </div><div class="line">	 * @Description: TODO(这里用一句话描述这个方法的作用) </div><div class="line">	 * @param @param args    描述 </div><div class="line">	 * @<span class="built_in">return</span> void    返回类型 </div><div class="line">	 * 创建人：xhay</div><div class="line">	 * 创建时间：2015-4-9 下午3:23:17</div><div class="line">	 * 修改人：xhay</div><div class="line">	 * 修改时间：2015-4-9 下午3:23:17</div><div class="line">	 * 修改备注：   </div><div class="line">	 */</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[]&#123;<span class="string">"applicationContext.xml"</span>&#125;);</div><div class="line">		</div><div class="line">		HelloServiceImpl a = (HelloServiceImpl)ctx.getBean(<span class="string">"aService"</span>);</div><div class="line">		a.say(<span class="string">"xhay1122.com"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此为止，简单的spring框架就配置好了：<br><img src="/img/spring/springaopall.png" alt="完整的目录结构"></p>
<p>运行结果：通过结果我们可以看到在我们调用say方法前后，有通知的信息输出<br><img src="/img/spring/springaopresult.png" alt="运行结果"></p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/Spring3AOP2.rar" target="_blank" rel="external">注解方式实现AOP源码</a></p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/Spring3AOP.rar" target="_blank" rel="external">非注解方式实现AOP源码</a></p>
<h3 id="知识点总结：">知识点总结：</h3><h4 id="切面（Aspect）">切面（Aspect）</h4><p>官方的抽象定义为“一个关注点的模块化，这个关注点可能会横切多个对象”。“切面”在ApplicationContext中<aop:aspect>来配置。</aop:aspect></p>
<h4 id="连接点（Joinpoint）">连接点（Joinpoint）</h4><p>程序执行过程中的某一行为，例如，HelloServiceImpl.say()的调用。</p>
<h4 id="通知（Advice）">通知（Advice）</h4><p>“切面”对于某个“连接点”所产生的动作。其中，一个“切面”可以包含多个“Advice”，例如TestAspect。Advice共有如下5种类型：</p>
<p>A 前置通知（Before advice）：在某连接点（JoinPoint）之前执行的通知，但这个通知不能阻止连接点前的执行。xml中在<aop:aspect>里面使用<aop:before>元素进行声明；例如，TestAspect中的doBefore方法。注解中使用@Before声明；例如，TestAnnotationAspect中的doBefore方法。</aop:before></aop:aspect></p>
<p>B 后通知（After advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。xml中在<aop:aspect>里面使用<aop:after>元素进行声明。</aop:after></aop:aspect></p>
<p>C 返回后通知（After return advice）：在某连接点正常完成后执行的通知，不包括抛出异常的情况。xml中在<aop:aspect>里面使用<after-returning>元素进行声明。注解中使用@AfterReturning声明；</after-returning></aop:aspect></p>
<p>D 环绕通知（Around advice）：包围一个连接点的通知，类似Web中Servlet规范中的Filter的doFilter方法。可以在方法的调用前后完成自定义的行为，也可以选择不执行。xml中在<aop:aspect>里面使用<aop:around>元素进行声明。</aop:around></aop:aspect></p>
<p>E 抛出异常后通知（After throwing advice）：在方法抛出异常退出时执行的通知。xml中在<aop:aspect>里面使用<aop:after-throwing>元素进行声明。</aop:after-throwing></aop:aspect></p>
<p>通知执行顺序：前置通知→环绕通知连接点之前→连接点执行→环绕通知连接点之后→返回通知→后通知→(如果发生异常)异常通知→后通知</p>
<h4 id="切入点（Pointcut）">切入点（Pointcut）</h4><p>匹配连接点的断言，在AOP中通知和一个切入点表达式关联。示例中的所有通知所关注的连接点，都由切入点表达式execution(<em> com.xhay1122.spring3.aop.</em>.*(..))来决定。</p>
<p>● 切入点表达式</p>
<p>execution：用于匹配方法执行的连接点；</p>
<p>within：用于匹配指定类型内的方法执行；</p>
<p>this：用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；注意this中使用的表达式必须是完整类名，不支持通配符；</p>
<p>target：用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；注意target中使用的表达式必须是完整类名，不支持通配符；</p>
<p>args：用于匹配当前执行的方法传入的参数为指定类型的执行方法；参数类型列表中的参数必须是完整类名，通配符不支持；args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用；</p>
<p>@within：用于匹配所以持有指定注解类型内的方法；注解类型也必须是完整类名；</p>
<p>@target：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；注解类型也必须是完整类名；</p>
<p>@args：用于匹配当前执行的方法传入的参数持有指定注解的执行；注解类型也必须是完整类名；</p>
<p>@annotation：用于匹配当前执行方法持有指定注解的方法；注解类型也必须是完整类名；</p>
<p>bean：Spring AOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法；</p>
<p>reference pointcut：表示引用其他命名切入点，只有注解风格支持，XML风格不支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你阅读了上一篇文章&lt;a href=&quot;http://xhay1122.com/2015/04/09/2015-04-09-Spring3test/&quot;&gt;Spring的简单配置&lt;/a&gt;,相信你已经会搭建一个简单Spring IOC的框架了。那么说到IOC我们往往会联想到Spring AOP(面向切面编程),这次教程我们就来搭建一个简单的AOP框架，体验一下AOP的使用和好处。&lt;/p&gt;
    
    </summary>
    
      <category term="Framework" scheme="https://bingoran.github.io/categories/Framework/"/>
    
    
      <category term="spring" scheme="https://bingoran.github.io/tags/spring/"/>
    
      <category term="springAOP" scheme="https://bingoran.github.io/tags/springAOP/"/>
    
      <category term="框架" scheme="https://bingoran.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring配置" scheme="https://bingoran.github.io/tags/spring%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spring的简单配置</title>
    <link href="https://bingoran.github.io/2015/04/09/2015-04-09-Spring3test/"/>
    <id>https://bingoran.github.io/2015/04/09/2015-04-09-Spring3test/</id>
    <published>2015-04-09T11:48:06.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>也许你已经了解了Spring的各种好处，但是自己往往很少亲手去搭建一个Spring的项目，本教程主要目的是通过简单的示例，来来搭一个Spring框架，体验Spring的好处。</p>
<a id="more"></a>
<h3 id="工具准备">工具准备</h3><p>1：MyEclipse 10 + Jdk6.0 及以上</p>
<p>2：<a href="http://7xi2e1.com1.z0.glb.clouddn.com/spring-framework-3.2.2.RELEASE-dist.zip" target="_blank" rel="external">spring-framework-3.2.2.RELEASE-dist.zip</a> + commons-logging-1.1.3.jar(Java日志实现)</p>
<h3 id="构建环境">构建环境</h3><p>1：在MyEclipse里面新建一个工程，并命名称是Spring3test<br><img src="/img/spring/project.png" alt="Spring3test创建设置"></p>
<p>2：把发行包里面的lib下面的jar包都添加项目的lib文件夹下。我已经把所有的jar整理好了，<a href="http://7xi2e1.com1.z0.glb.clouddn.com/所需jar.rar" target="_blank" rel="external">点击下载</a></p>
<p>3：我们也可以根据Spring的工程来获取Spring需要的依赖包，在联网的情况下，通过Ant运行projects/build-spring-framework/build.xml，会自动去下载所需要的jar包，下载后的包位于projects/ivy-cache/repository下面。为了方便，把这些jar包也添加到MyEclipse里面。</p>
<h3 id="配置文件">配置文件</h3><p>1: 编写接口IHelloApi.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.spring3.hello;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 项目名称：Spring3<span class="built_in">test</span></div><div class="line"> * 类名称：HelloImpl</div><div class="line"> * 类描述：   </div><div class="line"> * 创建人：xhay</div><div class="line"> * 创建时间：2015-4-9 下午3:01:17</div><div class="line"> * 修改人：xhay</div><div class="line"> * 修改时间：2015-4-9 下午3:01:17</div><div class="line"> * 修改备注：   </div><div class="line"> * @version 1.0</div><div class="line"> * 软件工程创新实验室  </div><div class="line"> */</div><div class="line">public interface IHelloApi &#123;</div><div class="line">	public String helloSpring3(String name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类HelloImpl.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.xhay1122.spring3.hello;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 项目名称：Spring3<span class="built_in">test</span></div><div class="line"> * 类名称：HelloImpl</div><div class="line"> * 类描述：   </div><div class="line"> * 创建人：xhay</div><div class="line"> * 创建时间：2015-4-9 下午3:01:17</div><div class="line"> * 修改人：xhay</div><div class="line"> * 修改时间：2015-4-9 下午3:01:17</div><div class="line"> * 修改备注：   </div><div class="line"> * @version 1.0</div><div class="line"> * 软件工程创新实验室  </div><div class="line"> */</div><div class="line">public class HelloImpl implements IHelloApi &#123;</div><div class="line"></div><div class="line">	public String helloSpring3(String name) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		System.out.println(<span class="string">"Hello Spring3.------"</span>+name);</div><div class="line">		<span class="built_in">return</span> <span class="string">"OK , name = "</span>+name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2：在src目录下面创建一个Spring的配置文件applicationContext.xml，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> </div><div class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	   xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       xsi:schemaLocation=<span class="string">"</span></div><div class="line">          http://www.springframework.org/schema/beans</div><div class="line">     	  http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">       	  http://www.springframework.org/schema/context </div><div class="line">       	  http://www.springframework.org/schema/context/spring-context-3.2.xsd</div><div class="line">      	  http://www.springframework.org/schema/aop</div><div class="line">	      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</div><div class="line">	      http://www.springframework.org/schema/tx</div><div class="line">	      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</div><div class="line">		  "&gt;</div><div class="line"></div><div class="line">	&lt;!-- 用注解方式注入bean --&gt;</div><div class="line">	&lt;context:annotation-config /&gt;</div><div class="line">	&lt;!-- 装配bean --&gt;</div><div class="line">	&lt;bean name=<span class="string">"helloBean"</span> class=<span class="string">"com.xhay1122.spring3.hello.HelloImpl"</span>&gt;&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>3: 编写测试代码HelloClient.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* @Title: HelloClient.java</div><div class="line">* @Package com.xhay1122.spring3.test</div><div class="line">* @Description: TODO(用一句话描述该文件做什么)</div><div class="line">* @author matao@cqrainbowsoft.com</div><div class="line">* @date 2015-4-9 下午3:23:17</div><div class="line">* @version V1.0</div><div class="line">*/</div><div class="line">package com.xhay1122.spring3.test;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.xhay1122.spring3.hello.IHelloApi;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 项目名称：Spring3<span class="built_in">test</span></div><div class="line"> * 类名称：HelloClient</div><div class="line"> * 类描述：   </div><div class="line"> * 创建人：xhay</div><div class="line"> * 创建时间：2015-4-9 下午3:23:17</div><div class="line"> * 修改人：xhay</div><div class="line"> * 修改时间：2015-4-9 下午3:23:17</div><div class="line"> * 修改备注：   </div><div class="line"> * @version 1.0</div><div class="line"> * 软件工程创新实验室  </div><div class="line"> */</div><div class="line">public class HelloClient &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		//获取ApplicationContext</div><div class="line">		ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[]&#123;<span class="string">"applicationContext.xml"</span>&#125;);</div><div class="line">		</div><div class="line">		//从容器中获取hellBean（名字和applicationcontext.xml里面的id对应）</div><div class="line">		IHelloApi api = (IHelloApi)ctx.getBean(<span class="string">"helloBean"</span>);</div><div class="line">		String s = api.helloSpring3(<span class="string">"xhay"</span>);</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"back word:"</span>+s);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此为止，简单的spring框架就配置好了：<br><img src="/img/spring/all.png" alt="完整的目录结构"></p>
<p>运行结果：<br><img src="/img/spring/result.png" alt="运行结果"></p>
<p><a href="http://7xi2e1.com1.z0.glb.clouddn.com/Spring3test.rar" target="_blank" rel="external">下载完整源代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也许你已经了解了Spring的各种好处，但是自己往往很少亲手去搭建一个Spring的项目，本教程主要目的是通过简单的示例，来来搭一个Spring框架，体验Spring的好处。&lt;/p&gt;
    
    </summary>
    
      <category term="Framework" scheme="https://bingoran.github.io/categories/Framework/"/>
    
    
      <category term="spring" scheme="https://bingoran.github.io/tags/spring/"/>
    
      <category term="框架" scheme="https://bingoran.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring配置" scheme="https://bingoran.github.io/tags/spring%E9%85%8D%E7%BD%AE/"/>
    
      <category term="springIOC" scheme="https://bingoran.github.io/tags/springIOC/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC3整合缓存Ehcache实现</title>
    <link href="https://bingoran.github.io/2015/01/07/2015-01-07-springmec-ehcache/"/>
    <id>https://bingoran.github.io/2015/01/07/2015-01-07-springmec-ehcache/</id>
    <published>2015-01-07T13:12:29.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中需要用到缓存，在网上搜了大堆资料，发现Ehcache很好用，用法也比较简单。用简单的配置就可以使用了，而且Ehcache可以对页面、对象、数据进行缓存。Spring对Ehcache的支持也非常好。EHCache支持内存和磁盘的缓存，支持多种淘汰算法（LRU、LFU和FIFO）。<br><a id="more"></a></p>
<h3 id="一、本教程环境">一、本教程环境</h3><p>Spring 3.2.5 支持 <a href="http://pan.baidu.com/s/1hq3To8k" target="_blank" rel="external">http://pan.baidu.com/s/1hq3To8k</a></p>
<p>Ehcache 对象、数据缓存：<a href="http://ehcache.org/downloads/destination?name=ehcache-core-2.5.2-distribution.tar.gz&amp;bucket=tcdistributions&amp;file=ehcache-core-2.5.2-distribution.tar.gz" target="_blank" rel="external">http://ehcache.org/downloads/destination?name=ehcache-core-2.5.2-distribution.tar.gz&amp;bucket=tcdistributions&amp;file=ehcache-core-2.5.2-distribution.tar.gz</a></p>
<p>Ehcache Web页面缓存：<a href="http://ehcache.org/downloads/destination?name=ehcache-web-2.0.4-distribution.tar.gz&amp;bucket=tcdistributions&amp;file=ehcache-web-2.0.4-distribution.tar.gz" target="_blank" rel="external">http://ehcache.org/downloads/destination?name=ehcache-web-2.0.4-distribution.tar.gz&amp;bucket=tcdistributions&amp;file=ehcache-web-2.0.4-distribution.tar.gz</a></p>
<p>把jar加入到lib目录下</p>
<p>ehcache-core中可以找到 ehcache.xml 、ehcache.xsd着两个配置文件放到项目src下的配置文件目录</p>
<h3 id="二、页面缓存">二、页面缓存</h3><p>页面缓存主要用Filter过滤器对请求的url进行过滤，如果该url在缓存中出现。那么页面数据就从缓存对象中获取，并以gzip压缩后返回。其速度是没有压缩缓存时速度的3-5倍，效率相当之高！</p>
<p>在ehcache.xml中加入如下配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;  </div><div class="line">&lt;ehcache xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </div><div class="line">    xsi:noNamespaceSchemaLocation=<span class="string">"ehcache.xsd"</span>&gt;  </div><div class="line">    &lt;!--  </div><div class="line">    name：Cache的唯一标识  </div><div class="line">    maxElementsInMemory：内存中最大缓存对象数  </div><div class="line">    maxElementsOnDisk：磁盘中最大缓存对象数，若是0表示无穷大  </div><div class="line">    eternal：Element是否永久有效，一但设置了，timeout将不起作用  </div><div class="line">    overflowToDisk：配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcache将会Element写到磁盘中  </div><div class="line">    timeToIdleSeconds：设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大  </div><div class="line">    timeToLiveSeconds：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0.，也就是element存活时间无穷大 意思是从cache中的某个元素从创建到消亡的时间，从创建开始计时，当超过这个时间，这个元素将被从cache中清除  </div><div class="line">    diskPersistent：是否缓存虚拟机重启期数据  </div><div class="line">    diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒  </div><div class="line">    diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区  </div><div class="line">    memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）   </div><div class="line">    --&gt;  </div><div class="line">&lt;pre name=<span class="string">"code"</span> class=<span class="string">"html"</span>&gt;       &lt;diskStore path=<span class="string">"java.io.tmpdir"</span>/&gt;  </div><div class="line"> &lt;defaultCache maxElementsInMemory=<span class="string">"20000"</span> overflowToDisk=<span class="string">"true"</span> eternal=<span class="string">"false"</span> timeToIdleSeconds=<span class="string">"3600"</span> timeToLiveSeconds=<span class="string">"3600"</span> /&gt;</div><div class="line">&lt;cache name=<span class="string">"SimplePageCachingFilter"</span> maxElementsInMemory=<span class="string">"20000"</span> maxElementsOnDisk=<span class="string">"20000"</span> eternal=<span class="string">"false"</span> overflowToDisk=<span class="string">"true"</span> timeToIdleSeconds=<span class="string">"3600"</span> timeToLiveSeconds=<span class="string">"3600"</span> memoryStoreEvictionPolicy=<span class="string">"LFU"</span> /&gt;&lt;/ehcache&gt;</div></pre></td></tr></table></figure>
<p>拦截代码具体实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">[java] view plaincopyprint?</div><div class="line">/** </div><div class="line"> * @Title: PageEhCacheFilter.java </div><div class="line"> * @Package com.cqut.tool.cache </div><div class="line"> * @Description: TODO(用一句话描述该文件做什么) </div><div class="line"> * @author matao@cqrainbowsoft.com </div><div class="line"> * @date 2014-8-1 上午12:29:00 </div><div class="line"> * @version V1.0 </div><div class="line"> */  </div><div class="line">package com.cqut.tool.cache;  </div><div class="line">import java.util.Enumeration;  </div><div class="line">import javax.servlet.FilterChain;  </div><div class="line">import javax.servlet.http.HttpServletRequest;  </div><div class="line">import javax.servlet.http.HttpServletResponse;  </div><div class="line">import net.sf.ehcache.CacheException;  </div><div class="line">import net.sf.ehcache.constructs.blocking.LockTimeoutException;  </div><div class="line">import net.sf.ehcache.constructs.web.AlreadyCommittedException;  </div><div class="line">import net.sf.ehcache.constructs.web.AlreadyGzippedException;  </div><div class="line">import net.sf.ehcache.constructs.web.filter.FilterNonReentrantException;  </div><div class="line">import net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter;  </div><div class="line">import org.apache.commons.lang.StringUtils;  </div><div class="line">import org.apache.log4j.Logger;  </div><div class="line">  </div><div class="line"> /** </div><div class="line"> * 项目名称：&lt;span style=<span class="string">"font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;"</span>&gt;SpringMVCDemo&lt;/span&gt; 类名称：PageEhCacheFilter 类描述： 创建人：熊海 创建时间：2014-8-1 </div><div class="line"> * 上午12:29:00 修改人：熊海 修改时间：2014-8-1 上午12:29:00 修改备注： </div><div class="line"> *  </div><div class="line"> * @version 1.0 &lt;span style=<span class="string">"font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;"</span>&gt;Superc102&lt;/span&gt; </div><div class="line"> */  </div><div class="line">public class PageEhCacheFilter extends SimplePageCachingFilter &#123;  </div><div class="line">    private final static Logger <span class="built_in">log</span> = Logger.getLogger(PageEhCacheFilter.class);  </div><div class="line">    private final static String FILTER_URL_PATTERNS = <span class="string">"patterns"</span>;  </div><div class="line">    private static String[] cacheURLs;  </div><div class="line">    private void init() throws CacheException &#123;  </div><div class="line">        String patterns = filterConfig.getInitParameter(FILTER_URL_PATTERNS);  </div><div class="line">        cacheURLs = StringUtils.split(patterns, <span class="string">","</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    protected void <span class="keyword">do</span>Filter(final HttpServletRequest request,  </div><div class="line">    final HttpServletResponse response, final FilterChain chain)  </div><div class="line">    throws AlreadyGzippedException, AlreadyCommittedException,  </div><div class="line">    FilterNonReentrantException, LockTimeoutException, Exception &#123;  </div><div class="line">        <span class="keyword">if</span> (cacheURLs == null) &#123;  </div><div class="line">            init();  </div><div class="line">        &#125;  </div><div class="line">        String url = request.getRequestURI();  </div><div class="line">        boolean flag = <span class="literal">false</span>;  </div><div class="line">        <span class="keyword">if</span> (cacheURLs != null &amp;&amp; cacheURLs.length &gt; 0) &#123;  </div><div class="line">            <span class="keyword">for</span> (String cacheURL : cacheURLs) &#123;  </div><div class="line">                <span class="keyword">if</span> (url.contains(cacheURL.trim())) &#123;  </div><div class="line">                    flag = <span class="literal">true</span>;  </div><div class="line">                    <span class="built_in">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        // 如果包含我们要缓存的url 就缓存该页面，否则执行正常的页面转向  </div><div class="line">        <span class="keyword">if</span> (flag) &#123;  </div><div class="line">            String query = request.getQueryString();  </div><div class="line">            <span class="keyword">if</span> (query != null) &#123;  </div><div class="line">                query = <span class="string">"?"</span> + query;  </div><div class="line">            &#125;  </div><div class="line">            log.info(<span class="string">"当前请求被缓存："</span> + url + query);  </div><div class="line">            super.doFilter(request, response, chain);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            chain.doFilter(request, response);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)  </div><div class="line">    private boolean headerContains(final HttpServletRequest request,  </div><div class="line">            final String header, final String value) &#123;  </div><div class="line">        <span class="built_in">log</span>RequestHeaders(request);  </div><div class="line">        final Enumeration accepted = request.getHeaders(header);  </div><div class="line">        <span class="keyword">while</span> (accepted.hasMoreElements()) &#123;  </div><div class="line">            final String headerValue = (String) accepted.nextElement();  </div><div class="line">            <span class="keyword">if</span> (headerValue.indexOf(value) != -1) &#123;  </div><div class="line">                <span class="built_in">return</span> <span class="literal">true</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     *  </div><div class="line">     * @see net.sf.ehcache.constructs.web.filter.Filter<span class="comment">#acceptsGzipEncoding(javax.servlet.http.HttpServletRequest) </span></div><div class="line">     *  </div><div class="line">     *      &lt;b&gt;<span class="keyword">function</span>:&lt;/b&gt; 兼容ie6/7 gzip压缩 </div><div class="line">     *  </div><div class="line">     * @author hoojo </div><div class="line">     *  </div><div class="line">     * @createDate 2012-7-4 上午11:07:11 </div><div class="line">     */  </div><div class="line">  </div><div class="line">    @Override  </div><div class="line">    protected boolean acceptsGzipEncoding(HttpServletRequest request) &#123;  </div><div class="line">        boolean ie6 = headerContains(request, <span class="string">"User-Agent"</span>, <span class="string">"MSIE 6.0"</span>);  </div><div class="line">        boolean ie7 = headerContains(request, <span class="string">"User-Agent"</span>, <span class="string">"MSIE 7.0"</span>);  </div><div class="line">        <span class="built_in">return</span> acceptsEncoding(request, <span class="string">"gzip"</span>) || ie6 || ie7;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>web.xml加入如下配置:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> &lt;!-- ehcache页面缓存 --&gt;  </div><div class="line">&lt;filter&gt;  </div><div class="line">    &lt;filter-name&gt;PageEhCacheFilter&lt;/filter-name&gt;  </div><div class="line">        &lt;filter-class&gt;com.cqut.tool.cache.PageEhCacheFilter&lt;/filter-class&gt;  </div><div class="line">        &lt;init-param&gt;  </div><div class="line">        &lt;param-name&gt;patterns&lt;/param-name&gt;  </div><div class="line">        &lt;!-- 配置你需要缓存的url --&gt;  </div><div class="line">        &lt;param-value&gt;/module/jsp/news/newsCenter.jsp,indexPicController/getDimensionCode.do&lt;/param-value&gt;  </div><div class="line">    &lt;/init-param&gt;  </div><div class="line">                 </div><div class="line">&lt;/filter&gt;  </div><div class="line">&lt;filter-mapping&gt;  </div><div class="line">    &lt;filter-name&gt;PageEhCacheFilter&lt;/filter-name&gt;  </div><div class="line">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;  </div><div class="line">&lt;/filter-mapping&gt;  </div><div class="line">  </div><div class="line">&lt;filter-mapping&gt;  </div><div class="line">    &lt;filter-name&gt;PageEhCacheFilter&lt;/filter-name&gt;  </div><div class="line">    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;  </div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure>
<p>测试页面：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;  </div><div class="line">&lt;%@ page import=<span class="string">"com.cqut.tool.util.PropertiesTool"</span>%&gt;  </div><div class="line">&lt;%  </div><div class="line">String path = request.getContextPath();  </div><div class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+PropertiesTool.getSystemPram(<span class="string">"serverName"</span>)+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;  </div><div class="line">%&gt;  </div><div class="line">  </div><div class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;  </div><div class="line">&lt;html&gt;  </div><div class="line">  &lt;head&gt;  </div><div class="line">    &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;  </div><div class="line">      </div><div class="line">    &lt;title&gt;My JSP <span class="string">'testcache.jsp'</span> starting page&lt;/title&gt;  </div><div class="line">      </div><div class="line">    &lt;meta http-equiv=<span class="string">"pragma"</span> content=<span class="string">"no-cache"</span>&gt;  </div><div class="line">    &lt;meta http-equiv=<span class="string">"cache-control"</span> content=<span class="string">"no-cache"</span>&gt;  </div><div class="line">    &lt;meta http-equiv=<span class="string">"expires"</span> content=<span class="string">"0"</span>&gt;      </div><div class="line">    &lt;meta http-equiv=<span class="string">"keywords"</span> content=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;  </div><div class="line">    &lt;meta http-equiv=<span class="string">"description"</span> content=<span class="string">"This is my page"</span>&gt;  </div><div class="line">    &lt;!-- </div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"styles.css"</span>&gt; </div><div class="line">    --&gt;  </div><div class="line">  </div><div class="line">  &lt;/head&gt;  </div><div class="line">    </div><div class="line">  &lt;body&gt;  </div><div class="line">    &lt;%=new Date() %&gt;  </div><div class="line">  &lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>当第一次请求这些页面后，这些页面就会被添加到缓存中，如果缓存没失效的话以后请求这些页面将会从缓存中获取。</p>
<p>把缓存测试页面加入web.xml的配置中后。如果时间是变动的，则表示该页面没有被缓存或是缓存已经过期，否则则是在缓存状态了。</p>
<h3 id="三、对象缓存">三、对象缓存</h3><p>对象缓存就是将查询的数据添加到缓存中，下次再次查询相同东西的时候直接从缓存中获取，而不去数据库中查询。</p>
<p>对象缓存一般是针对方法、类而来的。本教程结合Spring的Aop对象、方法缓存来说明。</p>
<p>在application.xml的命名空间中加入下面配置：</p>
<p>xmlns:cache=”<a href="http://www.springframework.org/schema/cache" target="_blank" rel="external">http://www.springframework.org/schema/cache</a>“<br>xmlns:p=”<a href="http://www.springframework.org/schema/p" target="_blank" rel="external">http://www.springframework.org/schema/p</a>“<br><a href="http://www.springframework.org/schema/cache" target="_blank" rel="external">http://www.springframework.org/schema/cache</a><br><a href="http://www.springframework.org/schema/cache/spring-cache.xsd" target="_blank" rel="external">http://www.springframework.org/schema/cache/spring-cache.xsd</a></p>
<p>在application.xml的中加入下面配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!--start spring缓存 --&gt;  </div><div class="line">&lt;cache:annotation-driven /&gt;&lt;!-- 支持缓存的配置项&lt;span style=<span class="string">"font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;"</span>&gt;注解&lt;/span&gt; --&gt;  </div><div class="line">&lt;!--start 一般的spring_ehcache缓存管理 --&gt;  </div><div class="line">&lt;bean id=<span class="string">"cacheManager"</span> class=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span> p:cache-manager-ref=<span class="string">"ehcache"</span>/&gt;  </div><div class="line">&lt;!-- EhCache library setup --&gt;  </div><div class="line">&lt;bean id=<span class="string">"ehcache"</span> class=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span> p:config-location=<span class="string">"classpath:ehcache.xml"</span> p:shared=<span class="string">"true"</span>/&gt;   </div><div class="line">&lt;!-- 保持使用p:shared=<span class="string">"true"</span>同一个缓存 --&gt;  </div><div class="line">&lt;!--end 一般的spring_ehcache缓存管理 --&gt;  </div><div class="line">&lt;!--end spring缓存 --&gt;</div></pre></td></tr></table></figure>
<p>java测试方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">@Cacheable(value=<span class="string">"myCache"</span>,key=<span class="string">"#columnCode+'ColumnsServicegetColumns'"</span>,condition=<span class="string">"#columnCode&lt;23"</span>)  </div><div class="line">public String getColumns(int columnCode)&#123;  </div><div class="line">	System.out.println(<span class="string">"请求后台："</span>+columnCode);  </div><div class="line">        <span class="built_in">return</span> <span class="string">"xhay"</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Cacheable注解可以用在方法或者类级别。当他应用于方法级别的时候，就是如上所说的缓存返回值了。当应用在类级别的时候，这个类的所有方法的返回值都将被缓存。</p>
<p>@Cacheable注解有三个参数，value是必须的，还有key和condition。第一个参数，也就是value指明ehcache.xml配置的缓存名称。</p>
<p>@Cacheable注解的方法的签名来作为key，当然你可以重写key，自定义key可以使用SpEL表达式。</p>
<p>@Cacheable的最后一个参数是condition（可选），同样的，也是引用一个SpEL表达式。但是这个参数将指明方法的返回结果是否被缓存。</p>
<p>在上面这个测试例子中，第一次访问的时候后台会打印日志“请求后台：”，下一次请求的时候直接从缓存中拿数据。不会有后台输出。</p>
<p>想对EhCache做进一步了解的可以参考这一片文章：<a href="http://raychase.iteye.com/blog/1545906" target="_blank" rel="external">http://raychase.iteye.com/blog/1545906</a></p>
]]></content>
    
    <summary type="html">
    
      项目中需要用到缓存，在网上搜了大堆资料，发现Ehcache很好用，用法也比较简单。用简单的配置就可以使用了，而且Ehcache可以对页面、对象、数据进行缓存。Spring对Ehcache的支持也非常好。EHCache支持内存和磁盘的缓存，支持多种淘汰算法（LRU、LFU和FIFO）
    
    </summary>
    
      <category term="java" scheme="https://bingoran.github.io/categories/java/"/>
    
    
      <category term="软件配置" scheme="https://bingoran.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
      <category term="springMVC" scheme="https://bingoran.github.io/tags/springMVC/"/>
    
      <category term="ehcache" scheme="https://bingoran.github.io/tags/ehcache/"/>
    
      <category term="缓存" scheme="https://bingoran.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="xhay" scheme="https://bingoran.github.io/tags/xhay/"/>
    
      <category term="web前端" scheme="https://bingoran.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建subversion服务器</title>
    <link href="https://bingoran.github.io/2014/12/27/2014-12-27-Subversion/"/>
    <id>https://bingoran.github.io/2014/12/27/2014-12-27-Subversion/</id>
    <published>2014-12-27T14:53:14.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么使用SVN">一、为什么使用SVN</h3><p>1、管理方便，逻辑明确，符合一般人思维习惯。</p>
<p>2、易于管理，集中式服务器更能保证安全性。</p>
<p>3、代码一致性非常高。</p>
<p>4、适合开发人数不多的项目开发。</p>
<p>5、大部分软件配置管理教学的大学教材都是使用svn。</p>
<a id="more"></a>
<h3 id="二、安装软件">二、安装软件</h3><p><a href="http://pan.baidu.com/s/1hq48UbU" target="_blank" rel="external">Setup-Subversion-1.7.5</a>      Svn服务器</p>
<p><a href="http://pan.baidu.com/s/1eQ5YQSq" target="_blank" rel="external">TortoiseSVN-1.7.7.22907-win32-svn-1.7.5</a>   svn客户端（图形化界面）</p>
<p><a href="http://pan.baidu.com/s/1mgHXUqs" target="_blank" rel="external">svn-1.8.5插件</a> MyEclipse svn插件</p>
<h3 id="三、搭建svn服务器">三、搭建svn服务器</h3><p>1、安装Subversion</p>
<p>2、选择svn资源库存放路径，我这里选择的是D:\upload\svnRep</p>
<p>3、打开命令提示符执行svnadmin create svnrepTest命令。则会在当前目录下创建了一个svnrepo目录，里面包含了一些db,conf等子目录。</p>
<p>4、在安装目录conf下有一个svnserve.conf文件，在里面有一行password-db = passwd表示如果访问库的用户名都配置在passwd文件里面。在前面把#去掉。并且需要把[general]前的#去掉，passwd文件中需要把[users]前的#去掉。passwd文件里面配置了用户名和密码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### This file is an example password file for svnserve.  </span></div><div class="line"><span class="comment">### Its format is similar to that of svnserve.conf. As shown in the  </span></div><div class="line"><span class="comment">### example below it contains one section labelled [users].  </span></div><div class="line"><span class="comment">### The name and password for each user follow, one account per line.  </span></div><div class="line">  </div><div class="line">[users]  </div><div class="line">harry = harryssecret  </div><div class="line">sally = sallyssecret  </div><div class="line">xhay = xhay123456</div></pre></td></tr></table></figure>
<h3 id="5、权限配置">5、权限配置</h3><p>authz文件是默认指定存放用户权限的文件,[groups]代表分组,这里我们设置dev、admin、testUser三个组,将前面创建的xhay用户分到dev组里,同样只需在[groups]下写上devr=xhay即可,[/]代 表根目录,比如设置[repository: /chenlly/fuz] 如果我们要设置dev组有完全的访问权限就在下面加上@dev=rw,前面加@符代表组,除此之外我们允许所有人都有 读取权限还要在下面加上*=r</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[aliases]  </div><div class="line"><span class="comment"># joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average  </span></div><div class="line">  </div><div class="line">[groups]  </div><div class="line">admin = xhay  </div><div class="line">dev = xionghai  </div><div class="line"><span class="built_in">test</span>User = <span class="built_in">test</span>1  </div><div class="line">  </div><div class="line">[/]  </div><div class="line">@admin = rw  </div><div class="line">@dev = rw  </div><div class="line">@<span class="built_in">test</span>User = r  </div><div class="line">  </div><div class="line"><span class="comment"># [/foo/bar]  </span></div><div class="line"><span class="comment"># harry = rw  </span></div><div class="line"><span class="comment"># &amp;joe = r  </span></div><div class="line"><span class="comment"># * =  </span></div><div class="line">  </div><div class="line"><span class="comment"># [repository:/baz/fuz]  </span></div><div class="line"><span class="comment"># @harry_and_sally = rw  </span></div><div class="line"><span class="comment"># * = r</span></div></pre></td></tr></table></figure>
<h3 id="四、启动svn服务">四、启动svn服务</h3><p>执行 svnserve –d –r D:\upload\svnRep\svnrepTest</p>
<p>注意：svn服务器运行方式有两种</p>
<p>a、svnserve</p>
<p>b、Apache http</p>
<p>这时候如果要想svn正常运行必须保持上面这个命令窗口一直开着，所以一般情况下我们是把svn服务加入到windows服务中。</p>
<p>添加服务：sc create SVN binpath= “/“D:/upload/svnTool/bin/svnserve.exe/“ —service -r D:\upload\svnRep\svnrepTest” displayname= “SVN Service” depend= Tcpip start= auto</p>
<p>删除服务：sc delete SVN</p>
<h3 id="五、在MyEclipse中使用svn">五、在MyEclipse中使用svn</h3><p>1、把svn插件放到myeclipse安装目录的dropins下。重启MyEclipse</p>
<p>2、在MyEclipse===》Window===》Prefenerces===》Team===》SVN 能够查看到svn插件</p>
<p>3、添加资源库位置</p>
<p>4、在MyEclipse===》Window===》Show View===》Other在弹出窗口的搜索框输入svn 选择SVN资源库<br>在svn资源库中新建一个资源库位置：svn://localhost 点完成，输入用户名xhay密码xhay123456保存，就可以正常使用svn了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、为什么使用SVN&quot;&gt;一、为什么使用SVN&lt;/h3&gt;&lt;p&gt;1、管理方便，逻辑明确，符合一般人思维习惯。&lt;/p&gt;
&lt;p&gt;2、易于管理，集中式服务器更能保证安全性。&lt;/p&gt;
&lt;p&gt;3、代码一致性非常高。&lt;/p&gt;
&lt;p&gt;4、适合开发人数不多的项目开发。&lt;/p&gt;
&lt;p&gt;5、大部分软件配置管理教学的大学教材都是使用svn。&lt;/p&gt;
    
    </summary>
    
      <category term="工具配置" scheme="https://bingoran.github.io/categories/software/"/>
    
    
      <category term="bitnami" scheme="https://bingoran.github.io/tags/bitnami/"/>
    
      <category term="redmine" scheme="https://bingoran.github.io/tags/redmine/"/>
    
      <category term="subversion" scheme="https://bingoran.github.io/tags/subversion/"/>
    
      <category term="软件配置" scheme="https://bingoran.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
      <category term="tortoisesvn" scheme="https://bingoran.github.io/tags/tortoisesvn/"/>
    
      <category term="svn" scheme="https://bingoran.github.io/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>bitnami-redmine自带的Subversion 配置</title>
    <link href="https://bingoran.github.io/2014/12/18/2014-12-18-redmine-Subversion/"/>
    <id>https://bingoran.github.io/2014/12/18/2014-12-18-redmine-Subversion/</id>
    <published>2014-12-18T14:56:13.000Z</published>
    <updated>2015-07-21T16:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>下载最新版的bitnami-redmine:<a href="https://bitnami.com/stacks" target="_blank" rel="external">https://bitnami.com/stacks</a><br>安装时勾选Subversion<br>  <img src="/img/20141024092739.png"></p>
<p>在命令行窗口切换到bitnami-redmine的安装目录：Bitnami\redmine-2.5.2-3\subversion\bin<br>创建资源库：svnadmin.exe create D:\svn\svn_c102\<br><a id="more"></a><br>然后到该目录下手工修改三行：<br>anon-access = none<br>auth-access = write<br>password-db = passwd<br>将#password-db = passwd前的#去掉，表明我们使用一个文件来配置用户及其密码。<br>打开同级目录下的passwd文件，打开后在最后添加<br>xhay= 123456<br>如果xhay前面有空格会提示 Authentication failed<br>这样就创建好了svn，但是访问svn资源库的时候地址为：svn://localhost/D:\svn\svn_c102\</p>
<p>这样访问加上了路径很不方便，大多数情况下我们希望通过svn://localhost或svn://localhost/svn_c102来访问资源库</p>
<p>要实现这个效果，我们可以修改Bitnami\redmine-2.5.2-3\subversion\scripts目录下的serviceinstall.bat把-d —listen-port=3690修改为—daemon —root D:/svn/svn_c102</p>
<p>重新运行serviceinstall.bat，这样就把svn的更目录切换到了D:/svn/svn_c102下。我们可以直接通过svn://localhost访问资源库了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载最新版的bitnami-redmine:&lt;a href=&quot;https://bitnami.com/stacks&quot;&gt;https://bitnami.com/stacks&lt;/a&gt;&lt;br&gt;安装时勾选Subversion&lt;br&gt;  &lt;img src=&quot;/img/20141024092739.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在命令行窗口切换到bitnami-redmine的安装目录：Bitnami\redmine-2.5.2-3\subversion\bin&lt;br&gt;创建资源库：svnadmin.exe create D:\svn\svn_c102\&lt;br&gt;
    
    </summary>
    
      <category term="工具配置" scheme="https://bingoran.github.io/categories/software/"/>
    
    
      <category term="bitnami" scheme="https://bingoran.github.io/tags/bitnami/"/>
    
      <category term="redmine" scheme="https://bingoran.github.io/tags/redmine/"/>
    
      <category term="subversion" scheme="https://bingoran.github.io/tags/subversion/"/>
    
      <category term="软件配置" scheme="https://bingoran.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
